diff --git a/faya-commons/src/main/java/com/csa/apex/fundyield/utility/Constants.java b/faya-commons/src/main/java/com/csa/apex/fundyield/utility/Constants.java
index 7e9324a..901d91c 100644
--- a/faya-commons/src/main/java/com/csa/apex/fundyield/utility/Constants.java
+++ b/faya-commons/src/main/java/com/csa/apex/fundyield/utility/Constants.java
@@ -19,7 +19,7 @@ public class Constants {
 	/**
 	 * The constant currentUserId STRING
 	 */
-	public static final String CURRENT_USER_ID = "currentUserId";
+	public static final String USER_ID = "userId";
 
 	/**
 	 * The constant request string
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAConfigurationService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAConfigurationService.java
index 3f8b6b1..2853ebf 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAConfigurationService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAConfigurationService.java
@@ -5,6 +5,7 @@ package com.csa.apex.fundyield.faya.api;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.ResponseBody;
@@ -26,7 +27,7 @@ public interface FAYAConfigurationService {
 
     /**
      * Gets SEC security config for the calculations in engines.
-     * 
+     * @param userId The user id passed in header.
      * @return the SEC security configuration
      * @throws FundAccountingYieldException
      *             in case any error occurred during processing
@@ -34,5 +35,5 @@ public interface FAYAConfigurationService {
     @RequestMapping(value = "securitySECDataConfiguration", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public SECConfiguration getConfiguration() throws FundAccountingYieldException;
+    public SECConfiguration getConfiguration(@RequestHeader("userId") String userId) throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYADistributiontFundYieldService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYADistributiontFundYieldService.java
index f59cece..30d8f22 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYADistributiontFundYieldService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYADistributiontFundYieldService.java
@@ -2,12 +2,11 @@ package com.csa.apex.fundyield.faya.api;
 
 import java.util.Date;
 
-import javax.servlet.http.HttpServletRequest;
-
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -28,6 +27,7 @@ public interface FAYADistributiontFundYieldService {
 
     /**
      * Gets Distribution Fund data for the business date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -36,12 +36,13 @@ public interface FAYADistributiontFundYieldService {
     @RequestMapping(value = "FAYADistributionFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getFAYADistributionFundYieldData(
-            @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
-            throws FundAccountingYieldException;
+	public FundAccountingYieldData getFAYADistributionFundYieldData(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
+			throws FundAccountingYieldException;
 
     /**
      * Persists the calculated Distribution Fund Yield data.
+     * @param userId The user id passed in header.
      * @param fundAccountingYieldData FundAccountingYieldData
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -50,11 +51,11 @@ public interface FAYADistributiontFundYieldService {
     @RequestMapping(value = "calculatedDistributionFundYieldPortfolio", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public boolean persistDistributionFundYieldData(@RequestBody FundAccountingYieldData fundAccountingYieldData,
-            HttpServletRequest request) throws FundAccountingYieldException;
+    public boolean persistDistributionFundYieldData(@RequestHeader("userId") String userId, @RequestBody FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -63,7 +64,7 @@ public interface FAYADistributiontFundYieldService {
     @RequestMapping(value = "calculatedFAYADistributionFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(
-            @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
-            throws FundAccountingYieldException;
+	public FundAccountingYieldData getCalculatedDistributionFundYieldData(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
+			throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAMoneyMarketFundYieldService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAMoneyMarketFundYieldService.java
index 81b3710..b2ff921 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAMoneyMarketFundYieldService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYAMoneyMarketFundYieldService.java
@@ -2,12 +2,11 @@ package com.csa.apex.fundyield.faya.api;
 
 import java.util.Date;
 
-import javax.servlet.http.HttpServletRequest;
-
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -26,6 +25,7 @@ public interface FAYAMoneyMarketFundYieldService {
 
     /**
      * Gets Money Market data for the business date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -34,12 +34,13 @@ public interface FAYAMoneyMarketFundYieldService {
     @RequestMapping(value = "FAYAMoneyMarketFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(
-            @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
-            throws FundAccountingYieldException;
+	public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
+			throws FundAccountingYieldException;
 
     /**
      * Persists the calculated Money Market Fund Yield data.
+     * @param userId The user id passed in header.
      * @param fundAccountingYieldData FundAccountingYieldData @RequestParam;
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -48,11 +49,11 @@ public interface FAYAMoneyMarketFundYieldService {
     @RequestMapping(value = "calculatedMoneyMarketFundYieldPortfolio", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public boolean persistMoneyMarketFundYieldData(@RequestBody FundAccountingYieldData fundAccountingYieldData,
-            HttpServletRequest request) throws FundAccountingYieldException;
+    public boolean persistMoneyMarketFundYieldData(@RequestHeader("userId") String userId, @RequestBody FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
 
     /**
      * Gets already calculated Money Market Fund Yield data for the given date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -61,7 +62,7 @@ public interface FAYAMoneyMarketFundYieldService {
     @RequestMapping(value = "calculatedFAYAMoneyMarketFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(
-            @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
-            throws FundAccountingYieldException;
+	public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
+			throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYASecuritySECYieldService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYASecuritySECYieldService.java
index 658f5d9..d9a862c 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYASecuritySECYieldService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/FAYASecuritySECYieldService.java
@@ -9,6 +9,7 @@ import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -32,6 +33,7 @@ public interface FAYASecuritySECYieldService {
 	/**
 	 * Gets the SEC security data.
 	 *
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            the business date
 	 * @return the list of security SEC data
@@ -43,13 +45,14 @@ public interface FAYASecuritySECYieldService {
 	@RequestMapping(value = "fayaFundAccountingSECYieldData", method = RequestMethod.GET, produces = "application/json")
 	@ResponseStatus(HttpStatus.OK)
 	@ResponseBody
-	public FundAccountingYieldData getFAYASECData(
+	public FundAccountingYieldData getFAYASECData(@RequestHeader("userId") String userId,
 			@RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
 			throws FundAccountingYieldException;
 
 	/**
 	 * Persists the calculated SEC security data.
 	 *
+	 * @param userId The user id passed in header.
 	 * @param fundAccountingYieldData
 	 *            the SEC security data to be persisted
 	 * @return flag indicating whether the data was persisted or not
@@ -61,11 +64,12 @@ public interface FAYASecuritySECYieldService {
 	@RequestMapping(value = "calculatedFundAccountingSECYieldData", method = RequestMethod.PUT, produces = "application/json")
 	@ResponseStatus(HttpStatus.OK)
 	@ResponseBody
-	public boolean persistSecuritySECData(@RequestBody FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
+	public boolean persistSecuritySECData(@RequestHeader("userId") String userId, @RequestBody FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
 
 	/**
 	 * Gets the calculated SEC security data.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            the business date
 	 * @return the list of calculated SEC security data
@@ -77,7 +81,7 @@ public interface FAYASecuritySECYieldService {
 	@RequestMapping(value = "calculatedFundAccountingSECYieldData", method = RequestMethod.GET, produces = "application/json")
 	@ResponseStatus(HttpStatus.OK)
 	@ResponseBody
-	public FundAccountingYieldData getCalculatedSECData(
+	public FundAccountingYieldData getCalculatedSECData(@RequestHeader("userId") String userId,
 			@RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
 			throws FundAccountingYieldException;
 }
\ No newline at end of file
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/ToleranceCheckService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/ToleranceCheckService.java
index 7062eac..2a97a37 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/ToleranceCheckService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/ToleranceCheckService.java
@@ -5,6 +5,7 @@ import java.util.Date;
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -23,6 +24,7 @@ public interface ToleranceCheckService {
 
     /**
      * Initiates the SEC fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
@@ -30,11 +32,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "secFundLevelBatchToleranceCheck", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public void initiateSECFundLevelBatchToleranceCheck(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public void initiateSECFundLevelBatchToleranceCheck(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Gets the fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -43,11 +46,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "secFundLevelBatchToleranceCheck", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public ToleranceCheckResult getSECFundLevelBatchToleranceCheckResult(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public ToleranceCheckResult getSECFundLevelBatchToleranceCheckResult(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Initiates the MM fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
@@ -55,11 +59,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "moneyMarketFundLevelBatchToleranceCheck", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public void initiateMoneyMarketFundLevelBatchToleranceCheck(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public void initiateMoneyMarketFundLevelBatchToleranceCheck(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Gets the MM fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -68,11 +73,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "moneyMarketFundLevelBatchToleranceCheck", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public ToleranceCheckResult getMoneyMarketFundLevelBatchToleranceCheckResult(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public ToleranceCheckResult getMoneyMarketFundLevelBatchToleranceCheckResult(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Initiates the Distribution fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
@@ -80,11 +86,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "distributionFundLevelBatchToleranceCheck", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public void initiateDistributionFundLevelBatchToleranceCheck(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public void initiateDistributionFundLevelBatchToleranceCheck(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Gets the Distribution fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -93,11 +100,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "distributionFundLevelBatchToleranceCheck", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public ToleranceCheckResult getDistributionFundLevelBatchToleranceCheckResult(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public ToleranceCheckResult getDistributionFundLevelBatchToleranceCheckResult(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Initiates the secutity level batch tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
@@ -105,11 +113,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "securityLevelBatchToleranceCheck", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public void initiateSecurityLevelBatchToleranceCheck(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public void initiateSecurityLevelBatchToleranceCheck(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Gets the secutity level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -118,11 +127,12 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "securityLevelBatchToleranceCheck", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public ToleranceCheckResult getSecurityLevelBatchToleranceCheckResult(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
+	public ToleranceCheckResult getSecurityLevelBatchToleranceCheckResult(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate);
 
     /**
      * Initiates the secutity level what if tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @param cusip the cusip.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -131,12 +141,13 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "securityLevelWhatIfToleranceCheck", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public void initiateSecurityLevelWhatIfToleranceCheck(
+    public void initiateSecurityLevelWhatIfToleranceCheck(@RequestHeader("userId") String userId,
             @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
             @RequestParam(Constants.CUSIP) String cusip);
 
     /**
      * Gets the secutity level what if tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -145,12 +156,13 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "securityLevelWhatIfToleranceCheck", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public ToleranceCheckResult getSecurityLevelWhatIfToleranceCheckResult(
+    public ToleranceCheckResult getSecurityLevelWhatIfToleranceCheckResult(@RequestHeader("userId") String userId,
             @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
             @RequestParam(Constants.CUSIP) String cusip);
 
     /**
      * Initiates the position level what if tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @param cusip the cusip.
      * @param portfolioHoldingSnapshotSid the holding snapshot id
@@ -160,13 +172,14 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "positionLevelWhatIfToleranceCheck", method = RequestMethod.PUT, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public void initiatePositionLevelWhatIfToleranceCheck(
+    public void initiatePositionLevelWhatIfToleranceCheck(@RequestHeader("userId") String userId,
             @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
             @RequestParam(Constants.CUSIP) String cusip,
             @RequestParam("portfolioHoldingSnapshotSid") int portfolioHoldingSnapshotSid);
 
     /**
      * Gets the position level what if tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @param cusip the cusip.
      * @param portfolioHoldingSnapshotSid the holding snapshot id
@@ -177,8 +190,8 @@ public interface ToleranceCheckService {
     @RequestMapping(value = "positionLevelWhatIfToleranceCheck", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public ToleranceCheckResult getPositionLevelWhatIfToleranceCheckResult(
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
-            @RequestParam(Constants.CUSIP) String cusip,
-            @RequestParam("portfolioHoldingSnapshotSid") int portfolioHoldingSnapshotSid);
+	public ToleranceCheckResult getPositionLevelWhatIfToleranceCheckResult(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
+			@RequestParam(Constants.CUSIP) String cusip,
+			@RequestParam("portfolioHoldingSnapshotSid") int portfolioHoldingSnapshotSid);
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/UtilityFAYAAPIService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/UtilityFAYAAPIService.java
index 634f07c..3c2bc69 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/UtilityFAYAAPIService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/UtilityFAYAAPIService.java
@@ -6,6 +6,7 @@ import java.util.Date;
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -23,6 +24,7 @@ public interface UtilityFAYAAPIService {
 
     /**
      * Gets the average of MM 1 Day Dist Yield Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -33,12 +35,14 @@ public interface UtilityFAYAAPIService {
     @RequestMapping(value = "avgOfMm1DayDistYieldPctForPreviousDays", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
-            @RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
+			@RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets the sum of Der 1 Day Yield N1A MM Pct for previous days.
+     * @param userId The user id passed in header;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -49,12 +53,14 @@ public interface UtilityFAYAAPIService {
     @RequestMapping(value = "sumOfDer1DayYieldN1AMmPctPreviousDays", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
-            @RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
+			@RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets the sum of Der Restate 1 Day Yield MM Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -65,13 +71,14 @@ public interface UtilityFAYAAPIService {
     @RequestMapping(value = "sumOfDerRestate1DayYieldMmPctPreviousDays", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(
-            @RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
-            @RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
+			@RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets the avg of MM 7 DayYield Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -82,12 +89,14 @@ public interface UtilityFAYAAPIService {
     @RequestMapping(value = "avgOfMm7DayYieldPctForPreviousDays", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
-            @RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
+			@RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets sum of Der 7 Day Yield N1A MM Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -98,7 +107,8 @@ public interface UtilityFAYAAPIService {
     @RequestMapping(value = "sumOfDer7DayYieldN1AMmPctPreviousDays", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
-            @RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
-            @RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(@RequestHeader("userId") String userId,
+			@RequestParam(Constants.SHARE_CLASS_SID) long shareClassSid,
+			@RequestParam(Constants.REPORT_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate,
+			@RequestParam(Constants.NUM_OF_DAYS) int numOfDays) throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationController.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationController.java
index 1abb849..c418e6d 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationController.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationController.java
@@ -5,7 +5,6 @@ package com.csa.apex.fundyield.faya.api.controllers;
 
 import javax.annotation.PostConstruct;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 
@@ -13,6 +12,7 @@ import com.csa.apex.fundyield.exceptions.ConfigurationException;
 import com.csa.apex.fundyield.faya.api.FAYAConfigurationService;
 import com.csa.apex.fundyield.fayacommons.entities.SECConfiguration;
 import com.csa.apex.fundyield.utility.CommonUtility;
+import com.csa.apex.fundyield.utility.Constants;
 import com.csa.apex.fundyield.utility.LogMethod;
 
 
@@ -53,11 +53,13 @@ public class FAYAConfigurationController implements FAYAConfigurationService {
     /**
      * Gets SEC security config for the calculations in engines.
      * 
+     * @param userId The user id passed in header. 
      * @return the SEC security configuration
      */
     @Override
     @LogMethod
-    public SECConfiguration getConfiguration() {
+    public SECConfiguration getConfiguration(String userId) {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getConfiguration", Constants.USER_ID);
         return secConfiguration;
     }
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldController.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldController.java
index 9956768..4f9b516 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldController.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldController.java
@@ -3,10 +3,7 @@ package com.csa.apex.fundyield.faya.api.controllers;
 import java.util.Date;
 
 import javax.annotation.PostConstruct;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpSession;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.transaction.annotation.Transactional;
@@ -17,6 +14,7 @@ import com.csa.apex.fundyield.faya.api.FAYADistributiontFundYieldService;
 import com.csa.apex.fundyield.faya.api.service.FAYADistYieldDataPersistenceService;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 import com.csa.apex.fundyield.utility.CommonUtility;
+import com.csa.apex.fundyield.utility.Constants;
 import com.csa.apex.fundyield.utility.LogMethod;
 
 /**
@@ -50,6 +48,7 @@ public class FAYADistributiontFundYieldController implements FAYADistributiontFu
 
     /**
      * Gets Distribution Fund data for the business date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -57,14 +56,16 @@ public class FAYADistributiontFundYieldController implements FAYADistributiontFu
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getFAYADistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData getFAYADistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getFAYADistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYADistributionFundYieldData", Constants.BUSINESS_DATE);
-        return fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(businessDate);
+        return fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(userId, businessDate);
     }
 
     /**
      * Persists the calculated Distribution Fund Yield data.
+     * @param userId The user id passed in header.
      * @param fundAccountingYieldData FundAccountingYieldData
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -73,18 +74,15 @@ public class FAYADistributiontFundYieldController implements FAYADistributiontFu
     @Override
     @LogMethod
     @Transactional
-    public boolean persistDistributionFundYieldData(FundAccountingYieldData fundAccountingYieldData,
-            HttpServletRequest request) throws FundAccountingYieldException {
+    public boolean persistDistributionFundYieldData(String userId, FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "persistDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(fundAccountingYieldData, this.getClass().getCanonicalName(), "persistDistributionFundYieldData", Constants.FUND_ACCOUNTING_YIELD_DATA);
-        CommonUtility.checkNull(request, this.getClass().getCanonicalName(), "persistDistributionFundYieldData", Constants.REQUEST);
-        HttpSession session = request.getSession();
-        String currentUserId = (String) session.getAttribute(Constants.CURRENT_USER_ID);
-        return fayaDistYieldDataPersistenceService.persistDistributionFundYieldData(fundAccountingYieldData,
-                currentUserId);
+        return fayaDistYieldDataPersistenceService.persistDistributionFundYieldData(userId, fundAccountingYieldData);
     }
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id passed in header.
      * @param businessDate - the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -92,10 +90,11 @@ public class FAYADistributiontFundYieldController implements FAYADistributiontFu
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedDistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.BUSINESS_DATE);
-        return fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(businessDate);
+        return fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(userId, businessDate);
     }
 
     public FAYADistYieldDataPersistenceService getFayaDistYieldDataPersistenceService() {
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldController.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldController.java
index 953b946..1073e30 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldController.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldController.java
@@ -3,10 +3,7 @@ package com.csa.apex.fundyield.faya.api.controllers;
 import java.util.Date;
 
 import javax.annotation.PostConstruct;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpSession;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.transaction.annotation.Transactional;
@@ -17,6 +14,7 @@ import com.csa.apex.fundyield.faya.api.FAYAMoneyMarketFundYieldService;
 import com.csa.apex.fundyield.faya.api.service.FAYAMoneyMarketDataPersistenceService;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 import com.csa.apex.fundyield.utility.CommonUtility;
+import com.csa.apex.fundyield.utility.Constants;
 import com.csa.apex.fundyield.utility.LogMethod;
 
 /**
@@ -49,6 +47,7 @@ public class FAYAMoneyMarketFundYieldController implements FAYAMoneyMarketFundYi
 
     /**
      * Gets Money Market data for the business date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -56,14 +55,16 @@ public class FAYAMoneyMarketFundYieldController implements FAYAMoneyMarketFundYi
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYAMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
-        return fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(businessDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getFAYAMoneyMarketFundYieldData", Constants.USER_ID);
+    	CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYAMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
+        return fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(userId, businessDate);
     }
 
     /**
      * Persists the calculated Money Market Fund Yield data.
+     * @param userId The user id passed in header.
      * @param fundAccountingYieldData FundAccountingYieldData
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -72,18 +73,15 @@ public class FAYAMoneyMarketFundYieldController implements FAYAMoneyMarketFundYi
     @Override
     @LogMethod
     @Transactional
-    public boolean persistMoneyMarketFundYieldData(FundAccountingYieldData fundAccountingYieldData,
-            HttpServletRequest request) throws FundAccountingYieldException {
+    public boolean persistMoneyMarketFundYieldData(String userId, FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException {
         CommonUtility.checkNull(fundAccountingYieldData, this.getClass().getCanonicalName(), "persistMoneyMarketFundYieldData", Constants.FUND_ACCOUNTING_YIELD_DATA);
-        CommonUtility.checkNull(request, this.getClass().getCanonicalName(), "persistMoneyMarketFundYieldData", Constants.REQUEST);
-        HttpSession session = request.getSession();
-        String currentUserId = (String) session.getAttribute(Constants.CURRENT_USER_ID);
-        return fayaMoneyMarketDataPersistenceService.persistMoneyMarketFundYieldData(fundAccountingYieldData,
-                currentUserId);
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "persistMoneyMarketFundYieldData", Constants.USER_ID);
+        return fayaMoneyMarketDataPersistenceService.persistMoneyMarketFundYieldData(userId, fundAccountingYieldData);
     }
 
     /**
      * Gets already calculated Money Market Fund Yield data for the given date.
+     * @param userId The user id.
      * @param businessDate the business date;
      * @returns FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -91,10 +89,11 @@ public class FAYAMoneyMarketFundYieldController implements FAYAMoneyMarketFundYi
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
-        return fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(businessDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.USER_ID);
+    	CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
+        return fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(userId, businessDate);
     }
 
     public FAYAMoneyMarketDataPersistenceService getFayaMoneyMarketDataPersistenceService() {
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldController.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldController.java
index 29450d6..8a5873f 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldController.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldController.java
@@ -7,7 +7,6 @@ import java.util.Date;
 
 import javax.annotation.PostConstruct;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.transaction.annotation.Transactional;
@@ -18,6 +17,7 @@ import com.csa.apex.fundyield.faya.api.FAYASecuritySECYieldService;
 import com.csa.apex.fundyield.faya.api.service.FAYASecuritySECYieldPersistenceService;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 import com.csa.apex.fundyield.utility.CommonUtility;
+import com.csa.apex.fundyield.utility.Constants;
 import com.csa.apex.fundyield.utility.LogMethod;
 
 /**
@@ -57,6 +57,7 @@ public class FAYASecuritySECYieldController implements FAYASecuritySECYieldServi
 	/**
 	 * Gets the SEC security data.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            the business date
 	 * @return the list of security SEC data
@@ -67,14 +68,16 @@ public class FAYASecuritySECYieldController implements FAYASecuritySECYieldServi
 	 */
 	@Override
     @LogMethod
-	public FundAccountingYieldData getFAYASECData(Date businessDate) throws FundAccountingYieldException {
+	public FundAccountingYieldData getFAYASECData(String userId, Date businessDate) throws FundAccountingYieldException {
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYASECData", Constants.BUSINESS_DATE);
-		return fayaSecuritySECYieldPersistenceService.getFAYASECData(businessDate);
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getFAYASECData", Constants.USER_ID);
+		return fayaSecuritySECYieldPersistenceService.getFAYASECData(userId, businessDate);
 	}
 
 	/**
 	 * Persists the calculated SEC security data.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param fundAccountingYieldData
 	 *            the SEC security data to be persisted
 	 * @return flag indicating whether the data was persisted or not
@@ -86,14 +89,16 @@ public class FAYASecuritySECYieldController implements FAYASecuritySECYieldServi
 	@Override
     @LogMethod
 	@Transactional
-	public boolean persistSecuritySECData(FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException {
+	public boolean persistSecuritySECData(String userId, FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException {
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "persistSecuritySECData", Constants.USER_ID);
 		CommonUtility.checkNull(fundAccountingYieldData, this.getClass().getCanonicalName(), "persistSecuritySECData", Constants.FUND_ACCOUNTING_YIELD_DATA);
-		return fayaSecuritySECYieldPersistenceService.persistSecuritySECData(fundAccountingYieldData);
+		return fayaSecuritySECYieldPersistenceService.persistSecuritySECData(userId, fundAccountingYieldData);
 	}
 
 	/**
 	 * Gets the calculated SEC security data.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            the business date
 	 * @return the list of calculated SEC security data
@@ -104,8 +109,8 @@ public class FAYASecuritySECYieldController implements FAYASecuritySECYieldServi
 	 */
 	@Override
     @LogMethod
-	public FundAccountingYieldData getCalculatedSECData(Date businessDate) throws FundAccountingYieldException {
+	public FundAccountingYieldData getCalculatedSECData(String userId, Date businessDate) throws FundAccountingYieldException {
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedSECData", Constants.BUSINESS_DATE);
-		return fayaSecuritySECYieldPersistenceService.getCalculatedSECData(businessDate);
+		return fayaSecuritySECYieldPersistenceService.getCalculatedSECData(userId, businessDate);
 	}
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckController.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckController.java
index b22f97a..62f3535 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckController.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckController.java
@@ -47,61 +47,70 @@ public class MockToleranceCheckController implements ToleranceCheckService {
 
     /**
      * Initiates the fund level tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
     @Override
     @LogMethod
-    public void initiateSECFundLevelBatchToleranceCheck(
+    public void initiateSECFundLevelBatchToleranceCheck(String userId,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate) {
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "initiateSECFundLevelBatchToleranceCheck", Constants.REPORT_DATE);
-        toleranceCheckService.initiateSECFundLevelBatchToleranceCheck(reportDate);
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "initiateSECFundLevelBatchToleranceCheck", Constants.USER_ID);
+		toleranceCheckService.initiateSECFundLevelBatchToleranceCheck(userId, reportDate);
     }
 
     /**
      * Initiates the MM fund level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
     @Override
     @LogMethod
-    public void initiateMoneyMarketFundLevelBatchToleranceCheck(
+    public void initiateMoneyMarketFundLevelBatchToleranceCheck(String userId,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate) {
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "initiateMoneyMarketFundLevelBatchToleranceCheck", Constants.REPORT_DATE);
-        toleranceCheckService.initiateMoneyMarketFundLevelBatchToleranceCheck(reportDate);
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "initiateMoneyMarketFundLevelBatchToleranceCheck", Constants.USER_ID);
+        toleranceCheckService.initiateMoneyMarketFundLevelBatchToleranceCheck(userId, reportDate);
     }
 
     /**
      * Initiates the security level batch tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
     @Override
     @LogMethod
-    public void initiateSecurityLevelBatchToleranceCheck(
+    public void initiateSecurityLevelBatchToleranceCheck(String userId,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate) {
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "initiateSecurityLevelBatchToleranceCheck", Constants.REPORT_DATE);
-        toleranceCheckService.initiateSecurityLevelBatchToleranceCheck(reportDate);
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "initiateSecurityLevelBatchToleranceCheck", Constants.USER_ID);
+        toleranceCheckService.initiateSecurityLevelBatchToleranceCheck(userId, reportDate);
     }
 
     /**
      * Initiates the Distribution fund level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) ;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
     @Override
     @LogMethod
-    public void initiateDistributionFundLevelBatchToleranceCheck(Date reportDate) {
+    public void initiateDistributionFundLevelBatchToleranceCheck(String userId, Date reportDate) {
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "initiateDistributionFundLevelBatchToleranceCheck", Constants.REPORT_DATE);
-        toleranceCheckService.initiateDistributionFundLevelBatchToleranceCheck(reportDate);
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "initiateDistributionFundLevelBatchToleranceCheck", Constants.USER_ID);
+        toleranceCheckService.initiateDistributionFundLevelBatchToleranceCheck(userId, reportDate);
     }
 
     /**
      * Initiates the secutity level what if tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @param cusip the cusip.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -109,14 +118,16 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public void initiateSecurityLevelWhatIfToleranceCheck(Date reportDate, String cusip) {
+    public void initiateSecurityLevelWhatIfToleranceCheck(String userId, Date reportDate, String cusip) {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "initiateSecurityLevelWhatIfToleranceCheck", Constants.USER_ID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "initiateSecurityLevelWhatIfToleranceCheck", Constants.REPORT_DATE);
         CommonUtility.checkNull(cusip, this.getClass().getCanonicalName(), "initiateSecurityLevelWhatIfToleranceCheck", Constants.CUSIP);
-        toleranceCheckService.initiateSecurityLevelWhatIfToleranceCheck(reportDate, cusip);
+        toleranceCheckService.initiateSecurityLevelWhatIfToleranceCheck(userId, reportDate, cusip);
     }
 
     /**
      * Initiates the position level what if tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @param cusip the cusip.
      * @param portfolioHoldingSnapshotSid - the holding snapshot id
@@ -125,16 +136,18 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public void initiatePositionLevelWhatIfToleranceCheck(
+    public void initiatePositionLevelWhatIfToleranceCheck(String userId, 
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, String cusip,
             int portfolioHoldingSnapshotSid) {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "initiatePositionLevelWhatIfToleranceCheck", Constants.USER_ID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "initiatePositionLevelWhatIfToleranceCheck", Constants.REPORT_DATE);
         CommonUtility.checkNull(cusip, this.getClass().getCanonicalName(), "initiatePositionLevelWhatIfToleranceCheck", Constants.CUSIP);
-        toleranceCheckService.initiatePositionLevelWhatIfToleranceCheck(reportDate, cusip, portfolioHoldingSnapshotSid);
+        toleranceCheckService.initiatePositionLevelWhatIfToleranceCheck(userId, reportDate, cusip, portfolioHoldingSnapshotSid);
     }
 
     /**
      * Gets the Distribution fund level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -142,13 +155,15 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public ToleranceCheckResult getDistributionFundLevelBatchToleranceCheckResult(Date reportDate) {
+    public ToleranceCheckResult getDistributionFundLevelBatchToleranceCheckResult(String userId, Date reportDate) {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getDistributionFundLevelBatchToleranceCheckResult", Constants.USER_ID);
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getDistributionFundLevelBatchToleranceCheckResult", Constants.REPORT_DATE);
-    	return createCheckResult(reportDate);
+    	return createCheckResult(userId, reportDate);
     }
 
     /**
      * Gets the fund level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -156,13 +171,15 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public ToleranceCheckResult getSECFundLevelBatchToleranceCheckResult(Date reportDate) {
+    public ToleranceCheckResult getSECFundLevelBatchToleranceCheckResult(String userId, Date reportDate) {
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getSECFundLevelBatchToleranceCheckResult", Constants.REPORT_DATE);
-    	return createCheckResult(reportDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSECFundLevelBatchToleranceCheckResult", Constants.USER_ID);
+    	return createCheckResult(userId, reportDate);
     }
 
     /**
      * Gets the MM fund level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -170,13 +187,15 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public ToleranceCheckResult getMoneyMarketFundLevelBatchToleranceCheckResult(Date reportDate) {
+    public ToleranceCheckResult getMoneyMarketFundLevelBatchToleranceCheckResult(String userId, Date reportDate) {
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getMoneyMarketFundLevelBatchToleranceCheckResult", Constants.REPORT_DATE);
-    	return createCheckResult(reportDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getMoneyMarketFundLevelBatchToleranceCheckResult", Constants.USER_ID);
+    	return createCheckResult(userId, reportDate);
     }
 
     /**
      * Gets the secutity level tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -185,13 +204,15 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public ToleranceCheckResult getSecurityLevelBatchToleranceCheckResult(Date reportDate) {
+    public ToleranceCheckResult getSecurityLevelBatchToleranceCheckResult(String userId, Date reportDate) {
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getSecurityLevelBatchToleranceCheckResult", Constants.REPORT_DATE);
-    	return createCheckResult(reportDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSecurityLevelBatchToleranceCheckResult", Constants.USER_ID);
+    	return createCheckResult(userId, reportDate);
     }
 
     /**
      * Gets the security level what if tolerance check results.
+     * @param userId The user id passed in header;
      * @param reportDate the report date ;
      * @return the results of the check
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -199,15 +220,17 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public ToleranceCheckResult getSecurityLevelWhatIfToleranceCheckResult(
+    public ToleranceCheckResult getSecurityLevelWhatIfToleranceCheckResult(String userId, 
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, String cusip) {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSecurityLevelWhatIfToleranceCheckResult", Constants.USER_ID);
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getSecurityLevelWhatIfToleranceCheckResult", Constants.REPORT_DATE);
     	CommonUtility.checkNull(cusip, this.getClass().getCanonicalName(), "getSecurityLevelWhatIfToleranceCheckResult", Constants.CUSIP);
-        return createCheckResult(reportDate);
+        return createCheckResult(userId, reportDate);
     }
 
     /**
      * Gets the position level what if tolerance check results.
+     * @param userId The user id passed in header.
      * @param reportDate the report date ;
      * @param cusip the cusip.
      * @param portfolioHoldingSnapshotSid the holding snapshot id
@@ -217,21 +240,24 @@ public class MockToleranceCheckController implements ToleranceCheckService {
      */
     @Override
     @LogMethod
-    public ToleranceCheckResult getPositionLevelWhatIfToleranceCheckResult(
+    public ToleranceCheckResult getPositionLevelWhatIfToleranceCheckResult(String userId, 
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, String cusip,
             int portfolioHoldingSnapshotSid) {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getPositionLevelWhatIfToleranceCheckResult", Constants.USER_ID);
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getPositionLevelWhatIfToleranceCheckResult", Constants.REPORT_DATE);
     	CommonUtility.checkNull(cusip, this.getClass().getCanonicalName(), "getPositionLevelWhatIfToleranceCheckResult", Constants.CUSIP);
-        return createCheckResult(reportDate);
+        return createCheckResult(userId, reportDate);
     }
 
     /**
      * Create the check result.
+     * @param userId The user id
      * @param reportDate the report date
      * @return the results of the check
      */
-    private ToleranceCheckResult createCheckResult(Date reportDate) {
+    private ToleranceCheckResult createCheckResult(String userId, Date reportDate) {
     	CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "createCheckResult", Constants.REPORT_DATE);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "createCheckResult", Constants.USER_ID);
         ToleranceCheckResult result = new ToleranceCheckResult();
         result.setProcessedWithoutErrors(true);
         return result;
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIController.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIController.java
index 23c7163..bfb26a1 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIController.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIController.java
@@ -48,6 +48,7 @@ public class UtilityFAYAAPIController implements UtilityFAYAAPIService {
 
     /**
      * Gets the average of MM 1 Day Dist Yield Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -57,18 +58,20 @@ public class UtilityFAYAAPIController implements UtilityFAYAAPIService {
      */
     @Override
     @LogMethod
-    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(long shareClassSid,
+    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(String userId, long shareClassSid,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getAvgOfMnyMkt1DayDistYieldPctForPreviousDays", Constants.USER_ID);
         CommonUtility.checkNumber(shareClassSid, this.getClass().getCanonicalName(), "getAvgOfMnyMkt1DayDistYieldPctForPreviousDays", Constants.SHARE_CLASS_SID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getAvgOfMnyMkt1DayDistYieldPctForPreviousDays", Constants.REPORT_DATE);
         CommonUtility.checkNumber(numOfDays, this.getClass().getCanonicalName(), "getAvgOfMnyMkt1DayDistYieldPctForPreviousDays", Constants.NUM_OF_DAYS);
-        return utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(shareClassSid, reportDate,
-                numOfDays);
+		return utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(userId, shareClassSid,
+				reportDate, numOfDays);
     }
 
     /**
      * Gets the sum of Der 1 Day Yield N1A MM Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -78,18 +81,20 @@ public class UtilityFAYAAPIController implements UtilityFAYAAPIService {
      */
     @Override
     @LogMethod
-    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(long shareClassSid,
+    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(String userId, long shareClassSid,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSumOfDer1DayYieldN1AMnyMktPctPreviousDays", Constants.USER_ID);
         CommonUtility.checkNumber(shareClassSid, this.getClass().getCanonicalName(), "getSumOfDer1DayYieldN1AMnyMktPctPreviousDays", Constants.SHARE_CLASS_SID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getSumOfDer1DayYieldN1AMnyMktPctPreviousDays", Constants.REPORT_DATE);
         CommonUtility.checkNumber(numOfDays, this.getClass().getCanonicalName(), "getSumOfDer1DayYieldN1AMnyMktPctPreviousDays", Constants.NUM_OF_DAYS);
-        return utilityFAYAAPIPersistenceService.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(shareClassSid, reportDate,
+        return utilityFAYAAPIPersistenceService.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(userId, shareClassSid, reportDate,
                 numOfDays);
     }
 
     /**
      * Gets the sum of Der Restate 1 Day Yield MM Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -99,18 +104,20 @@ public class UtilityFAYAAPIController implements UtilityFAYAAPIService {
      */
     @Override
     @LogMethod
-    public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(long shareClassSid,
+    public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(String userId, long shareClassSid,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
         CommonUtility.checkNumber(shareClassSid, this.getClass().getCanonicalName(), "getSumOfDerRestate1DayYieldMnyMktPctPreviousDays", Constants.SHARE_CLASS_SID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getSumOfDerRestate1DayYieldMnyMktPctPreviousDays", Constants.REPORT_DATE);
         CommonUtility.checkNumber(numOfDays, this.getClass().getCanonicalName(), "getSumOfDerRestate1DayYieldMnyMktPctPreviousDays", Constants.NUM_OF_DAYS);
-        return utilityFAYAAPIPersistenceService.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(shareClassSid,
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSumOfDerRestate1DayYieldMnyMktPctPreviousDays", Constants.USER_ID);
+        return utilityFAYAAPIPersistenceService.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(userId, shareClassSid,
                 reportDate, numOfDays);
     }
 
     /**
      * Gets the avg of MM 7 DayYield Pct for previous days.
+     * @param userId The user id passed in header.
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -120,18 +127,20 @@ public class UtilityFAYAAPIController implements UtilityFAYAAPIService {
      */
     @Override
     @LogMethod
-    public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(long shareClassSid,
+    public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(String userId, long shareClassSid,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getAvgOfMnyMkt7DayYieldPctForPreviousDays", Constants.USER_ID);
         CommonUtility.checkNumber(shareClassSid, this.getClass().getCanonicalName(), "getAvgOfMnyMkt7DayYieldPctForPreviousDays", Constants.SHARE_CLASS_SID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getAvgOfMnyMkt7DayYieldPctForPreviousDays", Constants.REPORT_DATE);
         CommonUtility.checkNumber(numOfDays, this.getClass().getCanonicalName(), "getAvgOfMnyMkt7DayYieldPctForPreviousDays", Constants.NUM_OF_DAYS);
-        return utilityFAYAAPIPersistenceService.getAvgOfMnyMkt7DayYieldPctForPreviousDays(shareClassSid, reportDate,
-                numOfDays);
+		return utilityFAYAAPIPersistenceService.getAvgOfMnyMkt7DayYieldPctForPreviousDays(userId, shareClassSid,
+				reportDate, numOfDays);
     }
 
     /**
      * Gets sum of Der 7 Day Yield N1A MM Pct for previous days.
+     * @param userId The user id passed in header;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -141,14 +150,15 @@ public class UtilityFAYAAPIController implements UtilityFAYAAPIService {
      */
     @Override
     @LogMethod
-    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(long shareClassSid,
+    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(String userId, long shareClassSid,
             @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSumOfDer7DayYieldN1AMnyMktPctPreviousDays", Constants.USER_ID);
         CommonUtility.checkNumber(shareClassSid, this.getClass().getCanonicalName(), "getSumOfDer7DayYieldN1AMnyMktPctPreviousDays", Constants.SHARE_CLASS_SID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "getSumOfDer7DayYieldN1AMnyMktPctPreviousDays", Constants.REPORT_DATE);
         CommonUtility.checkNumber(numOfDays, this.getClass().getCanonicalName(), "getSumOfDer7DayYieldN1AMnyMktPctPreviousDays", Constants.NUM_OF_DAYS);
-        return utilityFAYAAPIPersistenceService.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(shareClassSid, reportDate,
-                numOfDays);
+		return utilityFAYAAPIPersistenceService.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(userId, shareClassSid,
+				reportDate, numOfDays);
     }
 
     public UtilityFAYAAPIPersistenceService getUtilityFAYAAPIPersistenceService() {
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYADistYieldDataPersistenceService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYADistYieldDataPersistenceService.java
index eb15d86..1b1f062 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYADistYieldDataPersistenceService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYADistYieldDataPersistenceService.java
@@ -12,29 +12,32 @@ public interface FAYADistYieldDataPersistenceService {
     /**
      * Gets Distribution Fund data for the business date.
      *
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws  IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData getFAYADistributionFundYieldData(Date businessDate) throws FundAccountingYieldException;
+    public FundAccountingYieldData getFAYADistributionFundYieldData(String userId, Date businessDate) throws FundAccountingYieldException;
     /**
      * Persists the calculated Distribution Fund Yield data.
      * 
+     * @param userId The user id;
      * @param fundAccountingYieldData FundAccountingYieldData @RequestParam;
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public boolean persistDistributionFundYieldData(FundAccountingYieldData fundAccountingYieldData, String userId) throws FundAccountingYieldException;
+    public boolean persistDistributionFundYieldData(String userId, FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
      *
+     * @param userId the user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(Date businessDate) throws FundAccountingYieldException;
+    public FundAccountingYieldData getCalculatedDistributionFundYieldData(String userId, Date businessDate) throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYAMoneyMarketDataPersistenceService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYAMoneyMarketDataPersistenceService.java
index 8026df2..1ad0187 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYAMoneyMarketDataPersistenceService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYAMoneyMarketDataPersistenceService.java
@@ -16,35 +16,39 @@ public interface FAYAMoneyMarketDataPersistenceService {
     /**
      * Gets Money Market data for the business date. 
      * 
+     * @param userId The user id
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws FundAccountingYieldException 
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(Date businessDate) throws FundAccountingYieldException;
+    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(String userId, Date businessDate) throws FundAccountingYieldException;
 
     /**
      * Persists the calculated Money Market Fund Yield data.
      *
+     * @param userId The user id.
      * @param fundAccountingYieldData FundAccountingYieldData @RequestParam;
+     * @param userId The user id from user context.
      * @return the result of the execution.
      *
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public boolean persistMoneyMarketFundYieldData(FundAccountingYieldData fundAccountingYieldData, String userId) throws FundAccountingYieldException;
+    public boolean persistMoneyMarketFundYieldData(String userId, FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
 
     /**
      * Persists the calculated Distribution Fund Yield data.
      * 
+     * @param userId The user id.
      * @param businessDate the SecuritySECDatae @RequestParam;
      * @return the result of the execution.
      *
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(Date businessDate) throws FundAccountingYieldException;
+    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(String userId, Date businessDate) throws FundAccountingYieldException;
 
 }
 
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYASecuritySECYieldPersistenceService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYASecuritySECYieldPersistenceService.java
index 6d3ec39..e31c59b 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYASecuritySECYieldPersistenceService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/FAYASecuritySECYieldPersistenceService.java
@@ -20,6 +20,7 @@ public interface FAYASecuritySECYieldPersistenceService {
     /**
      * Gets the SEC Security.
      * 
+     * @param userId The user id
      * @param businessDate
      *        the business date
      * @return the list of security SEC data
@@ -28,11 +29,12 @@ public interface FAYASecuritySECYieldPersistenceService {
      * @throws IllegalArgumentException
      *         in case the input is invalid (null)
      */
-    public FundAccountingYieldData getFAYASECData(Date businessDate) throws FundAccountingYieldException;
+    public FundAccountingYieldData getFAYASECData(String userId, Date businessDate) throws FundAccountingYieldException;
 
     /**
      * Persists the calculated SEC security data.
      * 
+     * @param userId The user id.
      * @param fundAccountingYieldData
      *        the SEC security data to be persisted
      * @return flag indicating whether the data was persisted or not
@@ -41,11 +43,12 @@ public interface FAYASecuritySECYieldPersistenceService {
      * @throws IllegalArgumentException
      *         in case the input is invalid (null)
      */
-    public boolean persistSecuritySECData(FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
+    public boolean persistSecuritySECData(String userId, FundAccountingYieldData fundAccountingYieldData) throws FundAccountingYieldException;
 
     /**
      * Gets the calculated SEC security data.
      * 
+     * @param userId The user id.
      * @param businessDate
      *        the business date
      * @return the list of calculated SEC security data
@@ -54,5 +57,5 @@ public interface FAYASecuritySECYieldPersistenceService {
      * @throws IllegalArgumentException
      *         in case the input is invalid (null)
      */
-    public FundAccountingYieldData getCalculatedSECData(Date businessDate) throws FundAccountingYieldException;
+    public FundAccountingYieldData getCalculatedSECData(String userId, Date businessDate) throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/UtilityFAYAAPIPersistenceService.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/UtilityFAYAAPIPersistenceService.java
index b87fe31..c79181f 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/UtilityFAYAAPIPersistenceService.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/UtilityFAYAAPIPersistenceService.java
@@ -13,6 +13,7 @@ public interface UtilityFAYAAPIPersistenceService {
     /**
      * Gets the average of MM 1 Day Dist Yield Pct for previous days.
      *
+     * @param userId The user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -20,11 +21,12 @@ public interface UtilityFAYAAPIPersistenceService {
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
+    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets the sum of Der 1 Day Yield N1A MM Pct for previous days.
      *
+     * @param userId the user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -32,11 +34,12 @@ public interface UtilityFAYAAPIPersistenceService {
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
+    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets the sum of Der Restate 1 Day Yield MM Pct for previous days.
      *
+     * @param userId the user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -44,12 +47,13 @@ public interface UtilityFAYAAPIPersistenceService {
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(long shareClassSid, Date reportDate,
-                                                                       int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(String userId, long shareClassSid,
+			Date reportDate, int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets the avg of MM 7 DayYield Pct for previous days.
      *
+     * @param userId The user id;
      * @param  shareClassSid the share class id;
      * @param  reportDate the report date;
      * @param  numOfDays the number of days;
@@ -57,11 +61,13 @@ public interface UtilityFAYAAPIPersistenceService {
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
+	public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(String userId, long shareClassSid, Date reportDate,
+			int numOfDays) throws FundAccountingYieldException;
 
     /**
      * Gets sum of Der 7 Day Yield N1A MM Pct for previous days.
      *
+     * @param userId The user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -69,5 +75,5 @@ public interface UtilityFAYAAPIPersistenceService {
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
+    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays) throws FundAccountingYieldException;
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImpl.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImpl.java
index 2fb22e7..3ab9f84 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImpl.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImpl.java
@@ -56,6 +56,7 @@ public class FAYADistYieldDataPersistenceServiceImpl implements FAYADistYieldDat
 
     /**
      * Gets Distribution Fund data for the business date.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws FundAccountingYieldException
@@ -64,13 +65,16 @@ public class FAYADistYieldDataPersistenceServiceImpl implements FAYADistYieldDat
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getFAYADistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData getFAYADistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        return retrieveFundAccountingYieldData(businessDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getFAYADistributionFundYieldData", Constants.USER_ID);
+        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYADistributionFundYieldData", Constants.BUSINESS_DATE);
+        return retrieveFundAccountingYieldData(userId, businessDate);
     }
 
     /**
      * Persists the calculated Distribution Fund Yield data.
+     * @param userId The user id.
      * @param fundAccountingYieldData FundAccountingYieldData.
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -79,15 +83,17 @@ public class FAYADistYieldDataPersistenceServiceImpl implements FAYADistYieldDat
     @Override
     @LogMethod
     @Transactional
-    public boolean persistDistributionFundYieldData(FundAccountingYieldData fundAccountingYieldData, String userId)
+    public boolean persistDistributionFundYieldData(String userId, FundAccountingYieldData fundAccountingYieldData)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "persistDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(fundAccountingYieldData, this.getClass().getCanonicalName(), "persistDistributionFundYieldData", Constants.FUND_ACCOUNTING_YIELD_DATA);
-        storedProcedureHelper.saveFAYAPortfolioData(fundAccountingYieldData);
+        storedProcedureHelper.saveFAYAPortfolioData(userId, fundAccountingYieldData);
         return true;
     }
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -95,21 +101,25 @@ public class FAYADistYieldDataPersistenceServiceImpl implements FAYADistYieldDat
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedDistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        return retrieveFundAccountingYieldData(businessDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.USER_ID);
+        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.BUSINESS_DATE);
+        return retrieveFundAccountingYieldData(userId, businessDate);
     }
 
     /**
      * Gets FundAccountingYieldData from persistence.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    private FundAccountingYieldData retrieveFundAccountingYieldData(Date businessDate)
+    private FundAccountingYieldData retrieveFundAccountingYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "retrieveFundAccountingYieldData", Constants.BUSINESS_DATE);
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "retrieveFundAccountingYieldData", Constants.USER_ID);
         try {
             Map<String,Object> param1 = new HashMap<String,Object>(){{ put("business_date", businessDate); }};
             storedProcedure.queryDYPortfolio(param1);
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImpl.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImpl.java
index aec732c..d4a755d 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImpl.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImpl.java
@@ -59,6 +59,7 @@ public class FAYAMoneyMarketDataPersistenceServiceImpl implements FAYAMoneyMarke
 
     /**
      * Gets Money Market data for the business date.
+     * @param userId The user id
      * @param businessDate the business date;
      * @return FundAccountingYieldData;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -66,13 +67,16 @@ public class FAYAMoneyMarketDataPersistenceServiceImpl implements FAYAMoneyMarke
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData getFAYAMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        return retrieveFundAccountingYieldData(businessDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getFAYAMoneyMarketFundYieldData", Constants.USER_ID);
+        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYAMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
+        return retrieveFundAccountingYieldData(userId, businessDate);
     }
 
     /**
      * Persists the calculated Money Market Fund Yield data.
+     * @param userId The user id.
      * @param fundAccountingYieldData FundAccountingYieldData
      * @return the result of the execution.
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -81,15 +85,17 @@ public class FAYAMoneyMarketDataPersistenceServiceImpl implements FAYAMoneyMarke
     @Override
     @LogMethod
     @Transactional
-    public boolean persistMoneyMarketFundYieldData(FundAccountingYieldData fundAccountingYieldData, String userId)
+    public boolean persistMoneyMarketFundYieldData(String userId, FundAccountingYieldData fundAccountingYieldData)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "persistMoneyMarketFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(fundAccountingYieldData, this.getClass().getCanonicalName(), "persistMoneyMarketFundYieldData", Constants.FUND_ACCOUNTING_YIELD_DATA);
-        storedProcedureHelper.saveFAYAPortfolioData(fundAccountingYieldData);
+        storedProcedureHelper.saveFAYAPortfolioData(userId, fundAccountingYieldData);
         return true;
     }
 
     /**
      * Persists the calculated Distribution Fund Yield data.
+     * @param userId The user id.
      * @param businessDate - the business date @RequestParam;
      * @return the result of the execution.
      * @throws FundAccountingYieldException
@@ -98,20 +104,24 @@ public class FAYAMoneyMarketDataPersistenceServiceImpl implements FAYAMoneyMarke
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        return retrieveFundAccountingYieldData(businessDate);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.USER_ID);
+        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
+        return retrieveFundAccountingYieldData(userId, businessDate);
     }
 
     /**
      * Gets FundAccountingYieldData from persistence.
+     * @param userId The user id.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    private FundAccountingYieldData retrieveFundAccountingYieldData(Date businessDate)
+    private FundAccountingYieldData retrieveFundAccountingYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "retrieveFundAccountingYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(),"retrieveFundAccountingYieldData", Constants.BUSINESS_DATE);
         try {
             Map<String,Object> param1 = new HashMap<String,Object>(){{ put("business_date", businessDate); }};
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImpl.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImpl.java
index 55f1275..6743a69 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImpl.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImpl.java
@@ -38,6 +38,7 @@ import com.csa.apex.fundyield.fayacommons.entities.TradableEntity;
 import com.csa.apex.fundyield.fayacommons.entities.TradableEntitySnapshot;
 import com.csa.apex.fundyield.fayacommons.entities.UnderlyingInstrumentLink;
 import com.csa.apex.fundyield.utility.CommonUtility;
+import com.csa.apex.fundyield.utility.Constants;
 import com.csa.apex.fundyield.utility.LogMethod;
 
 /**
@@ -80,6 +81,7 @@ public class FAYASecuritySECYieldPersistenceServiceImpl implements FAYASecurityS
 
     /**
      * Persists the calculated SEC security data.
+     * @param userId The user id.
      * @param fundAccountingYieldData The FundAccountingYieldData to be persisted
      * @return flag indicating whether The data was persisted or not
      * @throws IllegalArgumentException in case the input is invalid (null)
@@ -88,18 +90,20 @@ public class FAYASecuritySECYieldPersistenceServiceImpl implements FAYASecurityS
     @Override
     @LogMethod
     @Transactional
-    public boolean persistSecuritySECData(FundAccountingYieldData fundAccountingYieldData)
+    public boolean persistSecuritySECData(String userId, FundAccountingYieldData fundAccountingYieldData)
             throws FundAccountingYieldException {
         CommonUtility.checkNull(fundAccountingYieldData, this.getClass().getCanonicalName(), "persistSecuritySECData", "Parameter fundAccountingYieldData");
+        CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "persistSecuritySECData", Constants.USER_ID);
 
-        storedProcedureHelper.saveFAYAInstrumentData(fundAccountingYieldData);
-        storedProcedureHelper.saveFAYAPortfolioData(fundAccountingYieldData);
+        storedProcedureHelper.saveFAYAInstrumentData(userId, fundAccountingYieldData);
+        storedProcedureHelper.saveFAYAPortfolioData(userId, fundAccountingYieldData);
 
         return true;
     }
 
     /**
      * Gets the SEC Security.
+     * @param userId The user id
      * @param businessDate the business date
      * @return the list of security SEC data
      * @throws FundAccountingYieldException in case any error occurred during processing
@@ -107,7 +111,8 @@ public class FAYASecuritySECYieldPersistenceServiceImpl implements FAYASecurityS
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getFAYASECData(Date businessDate) throws FundAccountingYieldException {
+    public FundAccountingYieldData getFAYASECData(String userId, Date businessDate) throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getFAYASECData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getFAYASECData", "Parameter businessDate");
 
         // The business date input parameters
@@ -266,6 +271,7 @@ public class FAYASecuritySECYieldPersistenceServiceImpl implements FAYASecurityS
 
     /**
      * Gets the calculated SEC security data.
+     * @param userId The user id.
      * @param businessDate the business date
      * @return the list of calculated SEC security data
      * @throws FundAccountingYieldException in case any error occurred during processing
@@ -273,7 +279,7 @@ public class FAYASecuritySECYieldPersistenceServiceImpl implements FAYASecurityS
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedSECData(Date businessDate) throws FundAccountingYieldException {
-        return getFAYASECData(businessDate);
+    public FundAccountingYieldData getCalculatedSECData(String userId, Date businessDate) throws FundAccountingYieldException {
+        return getFAYASECData(userId, businessDate);
     }
 }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/StoredProcedureHelper.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/StoredProcedureHelper.java
index d48f681..1218cd1 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/StoredProcedureHelper.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/StoredProcedureHelper.java
@@ -50,11 +50,6 @@ public class StoredProcedureHelper {
     private StoredProcedure storedProcedure;
 
     /**
-     * User id. Hard coded as currently there is no user context.
-     */
-    private static final String USER_ID = "CALCULATOR";
-
-    /**
      * Struct mapper for Instrument.
      */
     private static final StructMapper<Instrument> INSTRUMENT_MAPPER = createStructMapper(Instrument.class);
@@ -143,21 +138,22 @@ public class StoredProcedureHelper {
 
     /**
      * Persist portfolio data.
+     * @param userId The user id
      * @param portfolio The portfolio data to be persisted
      * @throws PersistenceException in case any error occurred during persisting
      */
-    private void persistPortfolio(Portfolio portfolio) throws PersistenceException {
+    private void persistPortfolio(String userId, Portfolio portfolio) throws PersistenceException {
 
         try {
             if (portfolio.getPortfolioSnapshots() != null) {
                 portfolio.getPortfolioSnapshots().forEach(snapshot -> {
-                    snapshot.setCreateId(USER_ID);
+                    snapshot.setCreateId(userId);
                     savePortfolioSnapshot(snapshot, true);
                 });
             }
             if (portfolio.getPortfolioHoldings() != null) {
                 portfolio.getPortfolioHoldings().forEach(snapshot -> {
-                    snapshot.setCreateId(USER_ID);
+                    snapshot.setCreateId(userId);
                     savePortfolioHoldingSnapshot(snapshot, true);
                 });
             }
@@ -165,7 +161,7 @@ public class StoredProcedureHelper {
                 portfolio.getShareClasses().forEach(sc -> {
                     if (sc.getShareClassSnapshots() != null) {
                         sc.getShareClassSnapshots().forEach(snapshot -> {
-                            snapshot.setCreateId(USER_ID);
+                            snapshot.setCreateId(userId);
                             saveShareClassSnapshot(snapshot, true);
                         });
                     }
@@ -178,30 +174,32 @@ public class StoredProcedureHelper {
 
     /**
      * Persist portfolio data.
+     * @param userId The user id
      * @param fundAccountingYieldData The FAYA data to be persisted
      * @throws PersistenceException in case any error occurred during persisting
      */
-    public void saveFAYAPortfolioData(FundAccountingYieldData fundAccountingYieldData) throws PersistenceException {
+    public void saveFAYAPortfolioData(String userId, FundAccountingYieldData fundAccountingYieldData) throws PersistenceException {
         if (fundAccountingYieldData.getPortfolios() != null) {
             for (Portfolio portfolio : fundAccountingYieldData.getPortfolios()) {
-                persistPortfolio(portfolio);
+                persistPortfolio(userId, portfolio);
             }
         }
     }
 
     /**
      * Persist instrument data.
+     * @param userId The user id
      * @param instrument The instrument data to be persisted
      * @throws PersistenceException in case any error occurred during persisting
      */
-    private void persistInstrument(Instrument instrument) throws PersistenceException {
+    private void persistInstrument(String userId, Instrument instrument) throws PersistenceException {
 
         try {
             if (instrument.getTradableEntities() != null) {
                 instrument.getTradableEntities().forEach(te -> {
                     if (te.getTradableEntitySnapshots() != null) {
                         te.getTradableEntitySnapshots().forEach(snapshot -> {
-                            snapshot.setCreateId(USER_ID);
+                            snapshot.setCreateId(userId);
                             saveTradableEntitySnapshot(snapshot, true);
                         });
                     }
@@ -215,13 +213,14 @@ public class StoredProcedureHelper {
 
     /**
      * Persist instrument data.
+     * @param userId The user id
      * @param fundAccountingYieldData The FAYA data to be persisted
      * @throws PersistenceException in case any error occurred during persisting
      */
-    public void saveFAYAInstrumentData(FundAccountingYieldData fundAccountingYieldData) throws PersistenceException {
+    public void saveFAYAInstrumentData(String userId, FundAccountingYieldData fundAccountingYieldData) throws PersistenceException {
         if (fundAccountingYieldData.getInstruments() != null) {
             for (Instrument instrument : fundAccountingYieldData.getInstruments()) {
-                persistInstrument(instrument);
+                persistInstrument(userId, instrument);
             }
         }
     }
diff --git a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImpl.java b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImpl.java
index 626048f..261a399 100644
--- a/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImpl.java
+++ b/faya-dataaccess/src/main/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImpl.java
@@ -49,6 +49,7 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
 
     /**
      * Gets the average of MM 1 Day Dist Yield Pct for previous days.
+     * @param userId The user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -58,9 +59,9 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
      */
     @Override
     @LogMethod
-    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(long shareClassSid, Date reportDate, int numOfDays)
+    public BigDecimal getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
-        Map<String,Object> params = buildParameters(shareClassSid, reportDate, numOfDays);
+        Map<String,Object> params = buildParameters(userId, shareClassSid, reportDate, numOfDays);
         try {
             storedProcedure.avgMM1(params);
         } catch(Exception e) {
@@ -71,6 +72,7 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
 
     /**
      * Gets the sum of Der 1 Day Yield N1A MM Pct for previous days.
+     * @param userId The user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -80,9 +82,9 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
      */
     @Override
     @LogMethod
-    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(long shareClassSid, Date reportDate, int numOfDays)
+    public BigDecimal getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
-        Map<String,Object> params = buildParameters(shareClassSid, reportDate, numOfDays);
+        Map<String,Object> params = buildParameters(userId, shareClassSid, reportDate, numOfDays);
         try {
             storedProcedure.sumD1(params);
         } catch(Exception e) {
@@ -93,6 +95,7 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
 
     /**
      * Gets the sum of Der Restate 1 Day Yield MM Pct for previous days.
+     * @param userId The user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -102,9 +105,9 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
      */
     @Override
     @LogMethod
-    public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(long shareClassSid, Date reportDate,
+    public BigDecimal getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(String userId, long shareClassSid, Date reportDate,
             int numOfDays) throws FundAccountingYieldException {
-        Map<String,Object> params = buildParameters(shareClassSid, reportDate, numOfDays);
+        Map<String,Object> params = buildParameters(userId, shareClassSid, reportDate, numOfDays);
         try {
             storedProcedure.sumDR1(params);
         } catch(Exception e) {
@@ -115,6 +118,7 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
 
     /**
      * Gets the avg of MM 7 DayYield Pct for previous days.
+     * @param userId the user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -124,9 +128,9 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
      */
     @Override
     @LogMethod
-    public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(long shareClassSid, Date reportDate, int numOfDays)
+    public BigDecimal getAvgOfMnyMkt7DayYieldPctForPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
-        Map<String,Object> params = buildParameters(shareClassSid, reportDate, numOfDays);
+        Map<String,Object> params = buildParameters(userId, shareClassSid, reportDate, numOfDays);
         try {
             storedProcedure.avgMM7(params);
         } catch(Exception e) {
@@ -137,6 +141,7 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
 
     /**
      * Gets sum of Der 7 Day Yield N1A MM Pct for previous days.
+     * @param userId The user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -146,9 +151,9 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
      */
     @Override
     @LogMethod
-    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(long shareClassSid, Date reportDate, int numOfDays)
+    public BigDecimal getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(String userId, long shareClassSid, Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
-        Map<String,Object> params = buildParameters(shareClassSid, reportDate, numOfDays);
+        Map<String,Object> params = buildParameters(userId, shareClassSid, reportDate, numOfDays);
         try {
             storedProcedure.sumD7(params);
         } catch(Exception e) {
@@ -159,6 +164,7 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
 
     /**
      * Build parameters to Map.
+     * @param userId teh user id;
      * @param shareClassSid the share class id;
      * @param reportDate the report date;
      * @param numOfDays the number of days;
@@ -166,8 +172,9 @@ public class UtilityFAYAAPIPersistenceServiceImpl implements UtilityFAYAAPIPersi
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    private Map<String,Object> buildParameters(long shareClassSid, Date reportDate, int numOfDays)
+    private Map<String,Object> buildParameters(String userId, long shareClassSid, Date reportDate, int numOfDays)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "callStoredProcedure", Constants.USER_ID);
         CommonUtility.checkNumber(shareClassSid, this.getClass().getCanonicalName(), "callStoredProcedure", Constants.SHARE_CLASS_SID);
         CommonUtility.checkNull(reportDate, this.getClass().getCanonicalName(), "callStoredProcedure", Constants.REPORT_DATE);
         CommonUtility.checkNumber(numOfDays, this.getClass().getCanonicalName(), "callStoredProcedure", Constants.NUM_OF_DAYS);
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationControllerTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationControllerTest.java
index 77c7a94..a849abc 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationControllerTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAConfigurationControllerTest.java
@@ -26,6 +26,7 @@ import com.csa.apex.fundyield.exceptions.FundAccountingYieldException;
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.FAYAConfigurationService;
 import com.csa.apex.fundyield.faya.api.utility.TestUtility;
+import com.csa.apex.fundyield.utility.Constants;
 
 /**
  * Test class for the FAYAConfigurationController.
@@ -65,10 +66,10 @@ public class FAYAConfigurationControllerTest {
      * @throws Exception if any exception occurs
      */
     @Test
-    public void getConfigurationTest() throws Exception {
-        mockMvc.perform(get("/securitySECDataConfiguration")).andExpect(status().isOk())
-                .andExpect(content().contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE))
-                .andExpect(jsonPath("$.operationScale", Matchers.is(7)))
-                .andExpect(jsonPath("$.roundingMode", Matchers.is(4)));
-    }
+	public void getConfigurationTest() throws Exception {
+		mockMvc.perform(get("/securitySECDataConfiguration").header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID))
+				.andExpect(status().isOk()).andExpect(content().contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE))
+				.andExpect(jsonPath("$.operationScale", Matchers.is(7)))
+				.andExpect(jsonPath("$.roundingMode", Matchers.is(4)));
+	}
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldControllerTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldControllerTest.java
index de61242..50b3961 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldControllerTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYADistributiontFundYieldControllerTest.java
@@ -7,10 +7,10 @@ import static org.springframework.test.web.servlet.request.MockMvcRequestBuilder
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -25,6 +25,8 @@ import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.FAYADistYieldDataPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
+import com.csa.apex.fundyield.utility.Constants;
 
 /**
 * Test class for the FAYADistributiontFundYieldController.
@@ -81,7 +83,17 @@ public class FAYADistributiontFundYieldControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getFAYADistributionFundYieldDataInvalid() throws Exception {
         FAYADistributiontFundYieldController instance = new FAYADistributiontFundYieldController();
-        instance.getFAYADistributionFundYieldData(null);
+        instance.getFAYADistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    /**
+     * Test for method getFAYADistributionFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getFAYADistributionFundYieldDataInvalidUserId() throws Exception {
+        FAYADistributiontFundYieldController instance = new FAYADistributiontFundYieldController();
+        instance.getFAYADistributionFundYieldData(null, new Date());
     }
     /**
      * Test for method persistDistributionFundYieldData.
@@ -91,7 +103,7 @@ public class FAYADistributiontFundYieldControllerTest {
     @Test
     public void persistDistributionFundYieldData() throws Exception {
     	Map<String, Object> sessionAttrs = new HashMap<String, Object>();
-    	sessionAttrs.put(Constants.CURRENT_USER_ID, "123");
+    	sessionAttrs.put(Constants.USER_ID, "123");
     	this.mockMvc.perform(put("/calculatedDistributionFundYieldPortfolio").param(Constants.BUSINESS_DATE, "2016-05-02").sessionAttrs(sessionAttrs))
 		.andExpect(status().is(400));
     }
@@ -123,6 +135,16 @@ public class FAYADistributiontFundYieldControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedDistributionFundYieldDataInvalid() throws Exception {
         FAYADistributiontFundYieldController instance = new FAYADistributiontFundYieldController();
-        instance.getCalculatedDistributionFundYieldData(null);
+        instance.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    /**
+     * Test for method getCalculatedDistributionFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedDistributionFundYieldDataInvalidUserId() throws Exception {
+        FAYADistributiontFundYieldController instance = new FAYADistributiontFundYieldController();
+        instance.getCalculatedDistributionFundYieldData(null, new Date());
     }
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldControllerTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldControllerTest.java
index 03ca027..7abb6c0 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldControllerTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYAMoneyMarketFundYieldControllerTest.java
@@ -7,10 +7,10 @@ import static org.springframework.test.web.servlet.request.MockMvcRequestBuilder
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -25,6 +25,8 @@ import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.FAYAMoneyMarketDataPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
+import com.csa.apex.fundyield.utility.Constants;
 
 /**
  * Test class for the FAYAMoneyMarketFundYieldController.
@@ -69,9 +71,8 @@ public class FAYAMoneyMarketFundYieldControllerTest {
      */
     @Test
     public void getFAYAMoneyMarketFundYieldData() throws Exception {
-        this.mockMvc.perform(get("/FAYAMoneyMarketFundYieldData").param(Constants.BUSINESS_DATE, "2016-05-02"))
-                .andExpect(status().is(400));
-
+		this.mockMvc.perform(get("/FAYAMoneyMarketFundYieldData").header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID)
+				.param(Constants.BUSINESS_DATE, "2016-05-02")).andExpect(status().is(400));
     }
 
     /**
@@ -81,7 +82,17 @@ public class FAYAMoneyMarketFundYieldControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getFAYAMoneyMarketFundYieldDataInvalid() throws Exception {
         FAYAMoneyMarketFundYieldController instance = new FAYAMoneyMarketFundYieldController();
-        instance.getFAYAMoneyMarketFundYieldData(null);
+        instance.getFAYAMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getFAYAMoneyMarketFundYieldData with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getFAYAMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+        FAYAMoneyMarketFundYieldController instance = new FAYAMoneyMarketFundYieldController();
+        instance.getFAYAMoneyMarketFundYieldData(null, new Date());
     }
 
     /**
@@ -91,10 +102,12 @@ public class FAYAMoneyMarketFundYieldControllerTest {
     @Test
     public void persistMoneyMarketFundYieldData() throws Exception {
         Map<String, Object> sessionAttrs = new HashMap<String, Object>();
-        sessionAttrs.put(Constants.CURRENT_USER_ID, "123");
-        this.mockMvc.perform(put("/calculatedMoneyMarketFundYieldPortfolio").param(Constants.BUSINESS_DATE, "2016-05-02")
-                .sessionAttrs(sessionAttrs)).andExpect(status().is(400));
-
+        sessionAttrs.put(Constants.USER_ID, "123");
+		this.mockMvc
+				.perform(put("/calculatedMoneyMarketFundYieldPortfolio")
+						.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID)
+						.param(Constants.BUSINESS_DATE, "2016-05-02").sessionAttrs(sessionAttrs))
+				.andExpect(status().is(400));
     }
 
     /**
@@ -113,9 +126,9 @@ public class FAYAMoneyMarketFundYieldControllerTest {
      */
     @Test
     public void getCalculatedMoneyMarketFundYieldData() throws Exception {
-        this.mockMvc.perform(get("/calculatedFAYAMoneyMarketFundYieldData").param(Constants.BUSINESS_DATE, "2016-05-02"))
-                .andExpect(status().is(400));
-
+		this.mockMvc.perform(get("/calculatedFAYAMoneyMarketFundYieldData")
+				.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.BUSINESS_DATE, "2016-05-02"))
+				.andExpect(status().is(400));
     }
 
     /**
@@ -125,6 +138,16 @@ public class FAYAMoneyMarketFundYieldControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedMoneyMarketFundYieldDataInvalid() throws Exception {
         FAYAMoneyMarketFundYieldController instance = new FAYAMoneyMarketFundYieldController();
-        instance.getCalculatedMoneyMarketFundYieldData(null);
+        instance.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getCalculatedMoneyMarketFundYieldData with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+        FAYAMoneyMarketFundYieldController instance = new FAYAMoneyMarketFundYieldController();
+        instance.getCalculatedMoneyMarketFundYieldData(null, new Date());
     }
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldControllerTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldControllerTest.java
index c4eb8b4..7123f4b 100755
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldControllerTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/FAYASecuritySECYieldControllerTest.java
@@ -92,8 +92,9 @@ public class FAYASecuritySECYieldControllerTest {
      */
     @Test
     public void getFAYASECDataTest() throws Exception {
-        mockMvc.perform(get("/fayaFundAccountingSECYieldData").param(BUSINESS_DATE_PARAM_NAME, "2014-12-01"))
-                .andExpect(status().isOk()).andExpect(content().contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE));
+		mockMvc.perform(get("/fayaFundAccountingSECYieldData").header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID)
+				.param(BUSINESS_DATE_PARAM_NAME, "2014-12-01")).andExpect(status().isOk())
+				.andExpect(content().contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE));
     }
 
     /**
@@ -102,7 +103,8 @@ public class FAYASecuritySECYieldControllerTest {
      */
     @Test
     public void getFAYASECDataInvalidTest() throws Exception {
-        this.mockMvc.perform(get("/fayaFundAccountingSECYieldData").param(Constants.BUSINESS_DATE, "invalid"))
+		this.mockMvc.perform(get("/fayaFundAccountingSECYieldData")
+				.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.BUSINESS_DATE, "invalid"))
                 .andExpect(status().is(400));
     }
 
@@ -114,7 +116,7 @@ public class FAYASecuritySECYieldControllerTest {
     public void persistSecuritySECDataTest() throws Exception {
 
         FundAccountingYieldData data = fayaSecuritySECYieldPersistenceService
-                .getFAYASECData(DateTime.parse("2014-12-01").toDate());
+                .getFAYASECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2014-12-01").toDate());
 
         // Set some calculation result
         BigDecimal yield = new BigDecimal(23.55);
@@ -144,10 +146,12 @@ public class FAYASecuritySECYieldControllerTest {
         Gson gson = new GsonBuilder().setDateFormat(Constants.API_DATE_FORMAT).create();
         String json = gson.toJson(data);
 
-        mockMvc.perform(put("/calculatedFundAccountingSECYieldData")
-                .contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE).content(json)).andExpect(status().isOk());
+		mockMvc.perform(
+				put("/calculatedFundAccountingSECYieldData").header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID)
+						.contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE).content(json))
+				.andExpect(status().isOk());
 
-        data = fayaSecuritySECYieldPersistenceService.getFAYASECData(DateTime.parse("2014-12-01").toDate());
+        data = fayaSecuritySECYieldPersistenceService.getFAYASECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2014-12-01").toDate());
 
         assertEquals(yield.setScale(2, BigDecimal.ROUND_HALF_DOWN),
                 data.getInstruments().get(0).getTradableEntities().get(0).getTradableEntitySnapshots().get(0)
@@ -180,7 +184,8 @@ public class FAYASecuritySECYieldControllerTest {
      */
     @Test
     public void getCalculatedSECDataTest() throws Exception {
-        mockMvc.perform(get("/calculatedFundAccountingSECYieldData").param(BUSINESS_DATE_PARAM_NAME, "2016-05-02"))
+		mockMvc.perform(get("/calculatedFundAccountingSECYieldData")
+				.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(BUSINESS_DATE_PARAM_NAME, "2016-05-02"))
                 .andExpect(status().isOk()).andExpect(content().contentType(TestUtility.APPLICATION_JSON_CONTENT_TYPE));
     }
 
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckControllerTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckControllerTest.java
index b35e138..c838b11 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckControllerTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/MockToleranceCheckControllerTest.java
@@ -25,6 +25,7 @@ import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.ToleranceCheckService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
 
 /**
  * Test class for the MockToleranceCheckController.
@@ -80,7 +81,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void initiateSECFundLevelBatchToleranceCheckInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.initiateSECFundLevelBatchToleranceCheck(null);
+        instance.initiateSECFundLevelBatchToleranceCheck(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method initiateSECFundLevelBatchToleranceCheck with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void initiateSECFundLevelBatchToleranceCheckInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.initiateSECFundLevelBatchToleranceCheck(null, new Date());
     }
 
     /**
@@ -100,7 +111,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void initiateMoneyMarketFundLevelBatchToleranceCheckInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.initiateMoneyMarketFundLevelBatchToleranceCheck(null);
+        instance.initiateMoneyMarketFundLevelBatchToleranceCheck(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method initiateMoneyMarketFundLevelBatchToleranceCheck with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void initiateMoneyMarketFundLevelBatchToleranceCheckInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.initiateMoneyMarketFundLevelBatchToleranceCheck(null, new Date());
     }
 
     /**
@@ -120,7 +141,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void initiateSecurityLevelBatchToleranceCheckInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.initiateSecurityLevelBatchToleranceCheck(null);
+        instance.initiateSecurityLevelBatchToleranceCheck(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method initiateSecurityLevelBatchToleranceCheck with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void initiateSecurityLevelBatchToleranceCheckInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.initiateSecurityLevelBatchToleranceCheck(null, new Date());
     }
 
     /**
@@ -140,7 +171,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getDistributionFundLevelBatchToleranceCheckResultInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.getDistributionFundLevelBatchToleranceCheckResult(null);
+        instance.getDistributionFundLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getDistributionFundLevelBatchToleranceCheckResult with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getDistributionFundLevelBatchToleranceCheckResultInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.getDistributionFundLevelBatchToleranceCheckResult(null, new Date());
     }
 
     /**
@@ -161,7 +202,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void initiateDistributionFundLevelBatchToleranceCheckInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.initiateDistributionFundLevelBatchToleranceCheck(null);
+        instance.initiateDistributionFundLevelBatchToleranceCheck(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method initiateDistributionFundLevelBatchToleranceCheck with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void initiateDistributionFundLevelBatchToleranceCheckInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.initiateDistributionFundLevelBatchToleranceCheck(null, new Date());
     }
 
     /**
@@ -182,7 +233,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSECFundLevelBatchToleranceCheckResultInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.getSECFundLevelBatchToleranceCheckResult(null);
+        instance.getSECFundLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getSECFundLevelBatchToleranceCheckResult with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSECFundLevelBatchToleranceCheckResultInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.getSECFundLevelBatchToleranceCheckResult(null, new Date());
     }
 
     /**
@@ -203,7 +264,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getMoneyMarketFundLevelBatchToleranceCheckResultInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.getMoneyMarketFundLevelBatchToleranceCheckResult(null);
+        instance.getMoneyMarketFundLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getMoneyMarketFundLevelBatchToleranceCheckResult with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getMoneyMarketFundLevelBatchToleranceCheckResultInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.getMoneyMarketFundLevelBatchToleranceCheckResult(null, new Date());
     }
 
     /**
@@ -224,7 +295,17 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSecurityLevelBatchToleranceCheckResultInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.getSecurityLevelBatchToleranceCheckResult(null);
+        instance.getSecurityLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getSecurityLevelBatchToleranceCheckResult with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSecurityLevelBatchToleranceCheckResultInvalidUserId() throws Exception {
+        MockToleranceCheckController instance = new MockToleranceCheckController();
+        instance.getSecurityLevelBatchToleranceCheckResult(null, new Date());
     }
 
     /**
@@ -246,7 +327,7 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void initiateSecurityLevelWhatIfToleranceCheckInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.initiateSecurityLevelWhatIfToleranceCheck(null, null);
+        instance.initiateSecurityLevelWhatIfToleranceCheck(null, null, null);
     }
 
     /**
@@ -255,10 +336,11 @@ public class MockToleranceCheckControllerTest {
      */
     @Test
     public void getSecurityLevelWhatIfToleranceCheckResult1() throws Exception {
-        this.mockMvc.perform(
-                get("/securityLevelWhatIfToleranceCheck").param(Constants.REPORT_DATE, "2016-05-02").param(Constants.CUSIP, "123"))
-                .andExpect(status().is(200));
-
+		this.mockMvc
+				.perform(
+						get("/securityLevelWhatIfToleranceCheck").param(Constants.USER_ID, TestUtility.DEFAULT_USER_ID)
+								.param(Constants.REPORT_DATE, "2016-05-02").param(Constants.CUSIP, "123"))
+				.andExpect(status().is(200));
     }
 
     /**
@@ -268,7 +350,7 @@ public class MockToleranceCheckControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSecurityLevelWhatIfToleranceCheckResultInvalid() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
-        instance.getSecurityLevelWhatIfToleranceCheckResult(null, null);
+        instance.getSecurityLevelWhatIfToleranceCheckResult(null, null, null);
     }
 
     /**
@@ -279,7 +361,7 @@ public class MockToleranceCheckControllerTest {
     public void getDistributionFundLevelBatchToleranceCheckResult() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
         Date reportDate = new Date();
-        assertNotNull(instance.getDistributionFundLevelBatchToleranceCheckResult(reportDate));
+        assertNotNull(instance.getDistributionFundLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, reportDate));
     }
 
     /**
@@ -290,7 +372,7 @@ public class MockToleranceCheckControllerTest {
     public void getSECFundLevelBatchToleranceCheckResult() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
         Date reportDate = new Date();
-        assertNotNull(instance.getSECFundLevelBatchToleranceCheckResult(reportDate));
+        assertNotNull(instance.getSECFundLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, reportDate));
     }
 
     /**
@@ -301,7 +383,7 @@ public class MockToleranceCheckControllerTest {
     public void getMoneyMarketFundLevelBatchToleranceCheckResult() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
         Date reportDate = new Date();
-        assertNotNull(instance.getMoneyMarketFundLevelBatchToleranceCheckResult(reportDate));
+        assertNotNull(instance.getMoneyMarketFundLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, reportDate));
     }
 
     /**
@@ -312,7 +394,7 @@ public class MockToleranceCheckControllerTest {
     public void getSecurityLevelBatchToleranceCheckResult() throws Exception {
         MockToleranceCheckController instance = new MockToleranceCheckController();
         Date reportDate = new Date();
-        assertNotNull(instance.getSecurityLevelBatchToleranceCheckResult(reportDate));
+        assertNotNull(instance.getSecurityLevelBatchToleranceCheckResult(TestUtility.DEFAULT_USER_ID, reportDate));
     }
 
     /**
@@ -324,7 +406,7 @@ public class MockToleranceCheckControllerTest {
         MockToleranceCheckController instance = new MockToleranceCheckController();
         Date reportDate = new Date();
         String cusip = "test4";
-        assertNotNull(instance.getSecurityLevelWhatIfToleranceCheckResult(reportDate, cusip));
+        assertNotNull(instance.getSecurityLevelWhatIfToleranceCheckResult(TestUtility.DEFAULT_USER_ID, reportDate, cusip));
     }
 
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIControllerTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIControllerTest.java
index 3ab05bd..0d35c71 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIControllerTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/controllers/UtilityFAYAAPIControllerTest.java
@@ -23,6 +23,7 @@ import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.UtilityFAYAAPIPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
 
 /**
  * Test class for the UtilityFAYAAPIController.
@@ -67,8 +68,11 @@ public class UtilityFAYAAPIControllerTest {
      */
     @Test
     public void getAvgOfMnyMkt1DayDistYieldPctForPreviousDays() throws Exception {
-        this.mockMvc.perform(get("/avgOfMm1DayDistYieldPctForPreviousDays").param(Constants.SHARE_CLASS_SID, "111")
-                .param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2")).andExpect(status().is(200));
+		this.mockMvc
+				.perform(get("/avgOfMm1DayDistYieldPctForPreviousDays")
+						.param(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.SHARE_CLASS_SID, "111")
+						.param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2"))
+				.andExpect(status().is(200));
     }
 
     /**
@@ -78,7 +82,17 @@ public class UtilityFAYAAPIControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getAvgOfMnyMkt1DayDistYieldPctForPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
-        instance.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(-1, new Date(), 1);
+        instance.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(TestUtility.DEFAULT_USER_ID, -1, new Date(), 1);
+    }
+    
+    /**
+     * Test for method getAvgOfMnyMkt1DayDistYieldPctForPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getAvgOfMnyMkt1DayDistYieldPctForPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
+        instance.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -87,8 +101,11 @@ public class UtilityFAYAAPIControllerTest {
      */
     @Test
     public void getSumOfDer1DayYieldN1AMnyMktPctPreviousDays() throws Exception {
-        this.mockMvc.perform(get("/sumOfDer1DayYieldN1AMmPctPreviousDays").param(Constants.SHARE_CLASS_SID, "111")
-                .param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2")).andExpect(status().is(200));
+		this.mockMvc
+				.perform(get("/sumOfDer1DayYieldN1AMmPctPreviousDays")
+						.param(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.SHARE_CLASS_SID, "111")
+						.param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2"))
+				.andExpect(status().is(200));
     }
 
     /**
@@ -98,7 +115,17 @@ public class UtilityFAYAAPIControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSumOfDer1DayYieldN1AMnyMktPctPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
-        instance.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(1, null, 1);
+        instance.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, 1, null, 1);
+    }
+    
+    /**
+     * Test for method getSumOfDer1DayYieldN1AMnyMktPctPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSumOfDer1DayYieldN1AMnyMktPctPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
+        instance.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -107,8 +134,11 @@ public class UtilityFAYAAPIControllerTest {
      */
     @Test
     public void getSumOfDerRestate1DayYieldMnyMktPctPreviousDays() throws Exception {
-        this.mockMvc.perform(get("/sumOfDerRestate1DayYieldMmPctPreviousDays").param(Constants.SHARE_CLASS_SID, "111")
-                .param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2")).andExpect(status().is(200));
+		this.mockMvc
+				.perform(get("/sumOfDerRestate1DayYieldMmPctPreviousDays")
+						.param(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.SHARE_CLASS_SID, "111")
+						.param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2"))
+				.andExpect(status().is(200));
     }
 
     /**
@@ -118,7 +148,17 @@ public class UtilityFAYAAPIControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSumOfDerRestate1DayYieldMnyMktPctPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
-        instance.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(1, null, 1);
+        instance.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, 1, null, 1);
+    }
+    
+    /**
+     * Test for method getSumOfDerRestate1DayYieldMnyMktPctPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSumOfDerRestate1DayYieldMnyMktPctPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
+        instance.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -127,8 +167,11 @@ public class UtilityFAYAAPIControllerTest {
      */
     @Test
     public void getAvgOfMnyMkt7DayYieldPctForPreviousDays() throws Exception {
-        this.mockMvc.perform(get("/avgOfMm7DayYieldPctForPreviousDays").param(Constants.SHARE_CLASS_SID, "111")
-                .param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2")).andExpect(status().is(200));
+		this.mockMvc
+				.perform(get("/avgOfMm7DayYieldPctForPreviousDays")
+						.param(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.SHARE_CLASS_SID, "111")
+						.param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2"))
+				.andExpect(status().is(200));
     }
 
     /**
@@ -138,7 +181,17 @@ public class UtilityFAYAAPIControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getAvgOfMnyMkt7DayYieldPctForPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
-        instance.getAvgOfMnyMkt7DayYieldPctForPreviousDays(1, null, 1);
+        instance.getAvgOfMnyMkt7DayYieldPctForPreviousDays(TestUtility.DEFAULT_USER_ID, 1, null, 1);
+    }
+    
+    /**
+     * Test for method getAvgOfMnyMkt7DayYieldPctForPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getAvgOfMnyMkt7DayYieldPctForPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
+        instance.getAvgOfMnyMkt7DayYieldPctForPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -147,8 +200,11 @@ public class UtilityFAYAAPIControllerTest {
      */
     @Test
     public void getSumOfDer7DayYieldN1AMnyMktPctPreviousDays() throws Exception {
-        this.mockMvc.perform(get("/sumOfDer7DayYieldN1AMmPctPreviousDays").param(Constants.SHARE_CLASS_SID, "111")
-                .param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2")).andExpect(status().is(200));
+		this.mockMvc
+				.perform(get("/sumOfDer7DayYieldN1AMmPctPreviousDays")
+						.param(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.SHARE_CLASS_SID, "111")
+						.param(Constants.REPORT_DATE, "2016-12-20").param(Constants.NUM_OF_DAYS, "2"))
+				.andExpect(status().is(200));
     }
 
     /**
@@ -158,6 +214,16 @@ public class UtilityFAYAAPIControllerTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSumOfDer7DayYieldN1AMnyMktPctPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
-        instance.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(1, null, 1);
+        instance.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, 1, null, 1);
+    }
+    
+    /**
+     * Test for method getSumOfDer7DayYieldN1AMnyMktPctPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSumOfDer7DayYieldN1AMnyMktPctPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIController instance = new UtilityFAYAAPIController();
+        instance.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(null, 1, new Date(), 1);
     }
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImplTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImplTest.java
index abbcb5e..a032fa3 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImplTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYADistYieldDataPersistenceServiceImplTest.java
@@ -22,6 +22,7 @@ import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.FAYADistYieldDataPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 import com.csa.apex.fundyield.fayacommons.entities.Instrument;
 import com.csa.apex.fundyield.fayacommons.entities.Portfolio;
@@ -57,7 +58,7 @@ public class FAYADistYieldDataPersistenceServiceImplTest {
     public void getFAYADistributionFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-20");
-        assertNotNull(fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(businessDate));
+        assertNotNull(fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
 
     /**
@@ -66,7 +67,16 @@ public class FAYADistYieldDataPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getFAYADistributionFundYieldDataInvalid() throws Exception {
-        fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(null);
+        fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getFAYADistributionFundYieldData with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getFAYADistributionFundYieldDataInvalidUserId() throws Exception {
+        fayaDistYieldDataPersistenceService.getFAYADistributionFundYieldData(null, new Date());
     }
 
     /**
@@ -108,7 +118,7 @@ public class FAYADistYieldDataPersistenceServiceImplTest {
         p.getPortfolioSnapshots().add(snapshot);
 
         data.getPortfolios().add(p);
-        fayaDistYieldDataPersistenceService.persistDistributionFundYieldData(data, "100");
+        fayaDistYieldDataPersistenceService.persistDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, data);
     }
 
     /**
@@ -128,7 +138,7 @@ public class FAYADistYieldDataPersistenceServiceImplTest {
     public void getCalculatedDistributionFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        assertNotNull(fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(businessDate));
+        assertNotNull(fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
 
     /**
@@ -137,6 +147,15 @@ public class FAYADistYieldDataPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedDistributionFundYieldDataInvalid() throws Exception {
-        fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(null);
+        fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getCalculatedDistributionFundYieldData with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedDistributionFundYieldDataInvalidUserId() throws Exception {
+        fayaDistYieldDataPersistenceService.getCalculatedDistributionFundYieldData(null, new Date());
     }
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImplTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImplTest.java
index 489922f..f342eef 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImplTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYAMoneyMarketDataPersistenceServiceImplTest.java
@@ -22,6 +22,7 @@ import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.FAYAMoneyMarketDataPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 import com.csa.apex.fundyield.fayacommons.entities.Instrument;
 import com.csa.apex.fundyield.fayacommons.entities.Portfolio;
@@ -57,7 +58,7 @@ public class FAYAMoneyMarketDataPersistenceServiceImplTest {
     public void getFAYAMoneyMarketFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-20");
-        assertNotNull(fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(businessDate));
+        assertNotNull(fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
 
     /**
@@ -66,7 +67,16 @@ public class FAYAMoneyMarketDataPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getFAYAMoneyMarketFundYieldDataInvalid() throws Exception {
-        fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(null);
+        fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getFAYAMoneyMarketFundYieldData with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getFAYAMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+        fayaMoneyMarketDataPersistenceService.getFAYAMoneyMarketFundYieldData(null, new Date());
     }
 
     /**
@@ -108,7 +118,7 @@ public class FAYAMoneyMarketDataPersistenceServiceImplTest {
         p.getPortfolioSnapshots().add(snapshot);
 
         data.getPortfolios().add(p);
-        fayaMoneyMarketDataPersistenceService.persistMoneyMarketFundYieldData(data, "100");
+        fayaMoneyMarketDataPersistenceService.persistMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, data);
     }
 
     /**
@@ -128,7 +138,7 @@ public class FAYAMoneyMarketDataPersistenceServiceImplTest {
     public void getCalculatedMoneyMarketFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        assertNotNull(fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(businessDate));
+        assertNotNull(fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
 
     /**
@@ -137,6 +147,15 @@ public class FAYAMoneyMarketDataPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedMoneyMarketFundYieldDataInvalid() throws Exception {
-        fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(null);
+        fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getCalculatedMoneyMarketFundYieldData with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+        fayaMoneyMarketDataPersistenceService.getCalculatedMoneyMarketFundYieldData(null, new Date());
     }
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImplTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImplTest.java
index 012b817..0518765 100755
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImplTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/FAYASecuritySECYieldPersistenceServiceImplTest.java
@@ -21,6 +21,7 @@ import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.FAYASecuritySECYieldPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 
 /**
@@ -50,7 +51,7 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
     @Test
     public void getFAYASECDataTestSuccess() throws Exception {
         FundAccountingYieldData data = fayaSecuritySECYieldPersistenceService
-                .getFAYASECData(DateTime.parse("2014-12-01").toDate());
+                .getFAYASECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2014-12-01").toDate());
         assertEquals(12, data.getInstruments().size());
         assertEquals(13, data.getPortfolios().size());
 
@@ -76,7 +77,7 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
     @Test
     public void getFAYASECDataTestNoData() throws Exception {
         FundAccountingYieldData data = fayaSecuritySECYieldPersistenceService
-                .getFAYASECData(DateTime.parse("2000-12-01").toDate());
+                .getFAYASECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2000-12-01").toDate());
         assertEquals(data.getInstruments().size(), 0);
         assertEquals(data.getPortfolios().size(), 0);
     }
@@ -87,7 +88,16 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getFAYASECDataTestNullDate() throws Exception {
-        fayaSecuritySECYieldPersistenceService.getFAYASECData(null);
+        fayaSecuritySECYieldPersistenceService.getFAYASECData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test getFAYASECData throws IllegalArgumentException in case the provided user id is null.
+     * @throws Exception if any exception occurs
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getFAYASECDataTestNullUserId() throws Exception {
+        fayaSecuritySECYieldPersistenceService.getFAYASECData(null, new Date());
     }
 
     /**
@@ -98,7 +108,7 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
     public void persistSecuritySECDataTestSuccess() throws Exception {
 
         FundAccountingYieldData data = fayaSecuritySECYieldPersistenceService
-                .getFAYASECData(DateTime.parse("2014-12-01").toDate());
+                .getFAYASECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2014-12-01").toDate());
 
         BigDecimal yield = new BigDecimal(23.55);
         BigDecimal income = new BigDecimal(0.532);
@@ -127,9 +137,9 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
         });
 
         // Persist
-        fayaSecuritySECYieldPersistenceService.persistSecuritySECData(data);
+        fayaSecuritySECYieldPersistenceService.persistSecuritySECData(TestUtility.DEFAULT_USER_ID, data);
 
-        data = fayaSecuritySECYieldPersistenceService.getFAYASECData(DateTime.parse("2014-12-01").toDate());
+        data = fayaSecuritySECYieldPersistenceService.getFAYASECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2014-12-01").toDate());
 
         assertEquals(yield.setScale(2, BigDecimal.ROUND_HALF_DOWN),
                 data.getInstruments().get(0).getTradableEntities().get(0).getTradableEntitySnapshots().get(0)
@@ -153,7 +163,7 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void persistSecuritySECDataTestNullInput() throws Exception {
-        fayaSecuritySECYieldPersistenceService.persistSecuritySECData(null);
+        fayaSecuritySECYieldPersistenceService.persistSecuritySECData(null, null);
     }
 
     /**
@@ -163,7 +173,7 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
     @Test
     public void getCalculatedSECDataTestSuccess() throws Exception {
         FundAccountingYieldData data = fayaSecuritySECYieldPersistenceService
-                .getCalculatedSECData(DateTime.parse("2014-12-01").toDate());
+                .getCalculatedSECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2014-12-01").toDate());
         assertEquals(12, data.getInstruments().size());
         assertEquals(13, data.getPortfolios().size());
 
@@ -182,7 +192,7 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
     @Test
     public void getCalculatedSECDataTestNoData() throws Exception {
         FundAccountingYieldData data = fayaSecuritySECYieldPersistenceService
-                .getCalculatedSECData(DateTime.parse("2000-12-01").toDate());
+                .getCalculatedSECData(TestUtility.DEFAULT_USER_ID, DateTime.parse("2000-12-01").toDate());
         assertEquals(data.getInstruments().size(), 0);
         assertEquals(data.getPortfolios().size(), 0);
     }
@@ -193,6 +203,15 @@ public class FAYASecuritySECYieldPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedSECDataTestNullDate() throws Exception {
-        fayaSecuritySECYieldPersistenceService.getCalculatedSECData(null);
+        fayaSecuritySECYieldPersistenceService.getCalculatedSECData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test getCalculatedSECData throws IllegalArgumentException in case the provided user id is null.
+     * @throws Exception if any exception occurs
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedSECDataTestNullUserId() throws Exception {
+        fayaSecuritySECYieldPersistenceService.getCalculatedSECData(null, new Date());
     }
 }
\ No newline at end of file
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImplTest.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImplTest.java
index e861ad4..444c778 100644
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImplTest.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/service/impl/UtilityFAYAAPIPersistenceServiceImplTest.java
@@ -22,6 +22,7 @@ import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import com.csa.apex.fundyield.faya.Application;
 import com.csa.apex.fundyield.faya.api.service.UtilityFAYAAPIPersistenceService;
+import com.csa.apex.fundyield.faya.api.utility.TestUtility;
 
 /**
  * Test class for the UtilityFAYAAPIPersistenceServiceImpl.
@@ -55,7 +56,7 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
         Date reportDate = f.parse("2016-12-10");
         int numOfDays = 41;
         assertEquals(expected,
-                utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(shareClassSid, reportDate, numOfDays));
+                utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(TestUtility.DEFAULT_USER_ID, shareClassSid, reportDate, numOfDays));
     }
 
     /**
@@ -64,7 +65,16 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getAvgOfMnyMkt1DayDistYieldPctForPreviousDaysInvalid() throws Exception {
-        utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(-1, null, 1);
+        utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(TestUtility.DEFAULT_USER_ID, -1, null, 1);
+    }
+    
+    /**
+     * Test for method getAvgOfMnyMkt1DayDistYieldPctForPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getAvgOfMnyMkt1DayDistYieldPctForPreviousDaysInvaliduserId() throws Exception {
+        utilityFAYAAPIPersistenceService.getAvgOfMnyMkt1DayDistYieldPctForPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -79,7 +89,7 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
         Date reportDate = f.parse("2016-12-10");
         int numOfDays = 68;
         assertEquals(expected,
-                utilityFAYAAPIPersistenceService.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(shareClassSid, reportDate, numOfDays));
+                utilityFAYAAPIPersistenceService.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, shareClassSid, reportDate, numOfDays));
     }
 
     /**
@@ -89,7 +99,17 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSumOfDer1DayYieldN1AMnyMktPctPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
-        instance.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(1, null, -1);
+        instance.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, 1, null, -1);
+    }
+    
+    /**
+     * Test for method getSumOfDer1DayYieldN1AMnyMktPctPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSumOfDer1DayYieldN1AMnyMktPctPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
+        instance.getSumOfDer1DayYieldN1AMnyMktPctPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -104,7 +124,7 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
         Date reportDate = f.parse("2016-12-10");
         int numOfDays = 47;
         assertEquals(expected,
-                utilityFAYAAPIPersistenceService.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(shareClassSid, reportDate, numOfDays));
+                utilityFAYAAPIPersistenceService.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, shareClassSid, reportDate, numOfDays));
     }
 
     /**
@@ -114,7 +134,17 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSumOfDerRestate1DayYieldMnyMktPctPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
-        instance.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(-1, new Date(), 1);
+        instance.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, -1, new Date(), 1);
+    }
+    
+    /**
+     * Test for method getSumOfDerRestate1DayYieldMnyMktPctPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSumOfDerRestate1DayYieldMnyMktPctPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
+        instance.getSumOfDerRestate1DayYieldMnyMktPctPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -129,7 +159,7 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
         Date reportDate = f.parse("2016-12-10");
         int numOfDays = 100;
         assertEquals(expected,
-                utilityFAYAAPIPersistenceService.getAvgOfMnyMkt7DayYieldPctForPreviousDays(shareClassSid, reportDate, numOfDays));
+                utilityFAYAAPIPersistenceService.getAvgOfMnyMkt7DayYieldPctForPreviousDays(TestUtility.DEFAULT_USER_ID, shareClassSid, reportDate, numOfDays));
     }
 
     /**
@@ -139,7 +169,17 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
     @Test(expected = IllegalArgumentException.class)
     public void getAvgOfMnyMkt7DayYieldPctForPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
-        instance.getAvgOfMnyMkt7DayYieldPctForPreviousDays(1, new Date(), -1);
+        instance.getAvgOfMnyMkt7DayYieldPctForPreviousDays(TestUtility.DEFAULT_USER_ID, 1, new Date(), -1);
+    }
+    
+    /**
+     * Test for method getAvgOfMnyMkt7DayYieldPctForPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getAvgOfMnyMkt7DayYieldPctForPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
+        instance.getAvgOfMnyMkt7DayYieldPctForPreviousDays(null, 1, new Date(), 1);
     }
 
     /**
@@ -154,7 +194,7 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
         Date reportDate = f.parse("2016-12-10");
         int numOfDays = 99;
         assertEquals(expected,
-                utilityFAYAAPIPersistenceService.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(shareClassSid, reportDate, numOfDays));
+                utilityFAYAAPIPersistenceService.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, shareClassSid, reportDate, numOfDays));
     }
 
     /**
@@ -164,6 +204,16 @@ public class UtilityFAYAAPIPersistenceServiceImplTest {
     @Test(expected = IllegalArgumentException.class)
     public void getSumOfDer7DayYieldN1AMnyMktPctPreviousDaysInvalid() throws Exception {
         UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
-        instance.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(-1, new Date(), 1);
+        instance.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(TestUtility.DEFAULT_USER_ID, -1, new Date(), 1);
+    }
+    
+    /**
+     * Test for method getSumOfDer7DayYieldN1AMnyMktPctPreviousDays with invalid user id.
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getSumOfDer7DayYieldN1AMnyMktPctPreviousDaysInvalidUserId() throws Exception {
+        UtilityFAYAAPIPersistenceServiceImpl instance = new UtilityFAYAAPIPersistenceServiceImpl();
+        instance.getSumOfDer7DayYieldN1AMnyMktPctPreviousDays(null, 1, new Date(), 1);
     }
 }
diff --git a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/utility/TestUtility.java b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/utility/TestUtility.java
index ce1b010..d9e8a3f 100755
--- a/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/utility/TestUtility.java
+++ b/faya-dataaccess/src/test/java/com/csa/apex/fundyield/faya/api/utility/TestUtility.java
@@ -19,4 +19,8 @@ public class TestUtility {
      */
     public static final String APPLICATION_JSON_CONTENT_TYPE = "application/json";
 
+    /**
+     * User Id for tests
+     */
+    public static final String DEFAULT_USER_ID = "U53R1D";
 }
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/DistributionFundYiedController.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/DistributionFundYiedController.java
index a656787..73cc6e0 100644
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/DistributionFundYiedController.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/DistributionFundYiedController.java
@@ -8,6 +8,7 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -54,6 +55,7 @@ public class DistributionFundYiedController {
     /**
      * Gets Distribution Fund data for the business date. In service data is obtained from customer REST API, calculated
      * and then persisted using customer REST API. using API.
+     * @param userId The user id passed in header;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -62,15 +64,17 @@ public class DistributionFundYiedController {
     @RequestMapping(value = "distributionFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getDistributionFundYieldData(
+    public FundAccountingYieldData getDistributionFundYieldData(@RequestHeader("userId") String userId,
             @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getDistributionFundYieldData", Constants.BUSINESS_DATE);
-        return distributionFundYieldService.processDistributionFundYieldData(businessDate);
+        return distributionFundYieldService.processDistributionFundYieldData(userId, businessDate);
     }
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id passed in header;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -79,11 +83,12 @@ public class DistributionFundYiedController {
     @RequestMapping(value = "calculatedDistributionFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(
+    public FundAccountingYieldData getCalculatedDistributionFundYieldData(@RequestHeader("userId") String userId,
             @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.BUSINESS_DATE);
-        return distributionFundYieldService.getCalculatedDistributionFundYieldData(businessDate);
+        return distributionFundYieldService.getCalculatedDistributionFundYieldData(userId, businessDate);
     }
 
     public DistributionFundYieldService getDistributionFundYieldService() {
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldController.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldController.java
index dbbe84c..22d70d5 100644
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldController.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldController.java
@@ -8,6 +8,7 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -55,6 +56,7 @@ public class MoneyMarketFundYieldController {
     /**
      * Gets Money Market data for the business date. In service data is obtained from customer REST API, calculated and
      * then persisted using customer REST API. using API.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -63,15 +65,17 @@ public class MoneyMarketFundYieldController {
     @RequestMapping(value = "moneyMarketFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getMoneyMarketFundYieldData(
+    public FundAccountingYieldData getMoneyMarketFundYieldData(@RequestHeader("userId") String userId, 
             @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getMoneyMarketFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
-        return moneyMarketFundYieldService.processMoneyMarketFundYieldData(businessDate);
+        return moneyMarketFundYieldService.processMoneyMarketFundYieldData(userId, businessDate);
     }
 
     /**
      * Gets already calculated Money Market Fund Yield data for the given date.
+     * @param userId The user id passed in header.
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -80,11 +84,12 @@ public class MoneyMarketFundYieldController {
     @RequestMapping(value = "calculatedMoneyMarketFundYieldData", method = RequestMethod.GET, produces = "application/json")
     @ResponseStatus(HttpStatus.OK)
     @ResponseBody
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(
+    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(@RequestHeader("userId") String userId, 
             @RequestParam(Constants.BUSINESS_DATE) @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
-        return moneyMarketFundYieldService.getCalculatedMoneyMarketFundYieldData(businessDate);
+        return moneyMarketFundYieldService.getCalculatedMoneyMarketFundYieldData(userId, businessDate);
     }
 
     public MoneyMarketFundYieldService getMoneyMarketFundYieldService() {
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/SecuritySECYieldController.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/SecuritySECYieldController.java
index 551e734..a4797c9 100755
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/SecuritySECYieldController.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/SecuritySECYieldController.java
@@ -14,6 +14,7 @@ import org.springframework.beans.factory.annotation.Value;
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.util.StopWatch;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
@@ -96,6 +97,7 @@ public class SecuritySECYieldController {
 	 * Gets SEC Security data with the calculated data for the business date. The securities are also persisted using
 	 * FAYA REST API.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            The Business date
 	 * @return List<SecuritySECData>
@@ -105,15 +107,16 @@ public class SecuritySECYieldController {
 	@ResponseStatus(HttpStatus.OK)
 	@ResponseBody
     @LogMethod
-	public FundAccountingYieldData getSecuritySECData(
+	public FundAccountingYieldData getSecuritySECData(@RequestHeader("userId") String userId, 
 			@RequestParam @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
 			throws FundAccountingYieldException {
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getSecuritySECData", Constants.BUSINESS_DATE);
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getSecuritySECData", Constants.USER_ID);
 
 		StopWatch stopWatch = new StopWatch();
 		stopWatch.start();
 
-		final FundAccountingYieldData securitySECData = secYieldService.processSecuritySECData(businessDate);
+		final FundAccountingYieldData securitySECData = secYieldService.processSecuritySECData(userId, businessDate);
 		truncateResults(securitySECData);
 
 		stopWatch.stop();
@@ -126,6 +129,7 @@ public class SecuritySECYieldController {
 	/**
 	 * Gets already calculated SEC Security data for the given date.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            the Business date
 	 * @return already calculated securitySECData;
@@ -135,15 +139,16 @@ public class SecuritySECYieldController {
 	@ResponseStatus(HttpStatus.OK)
 	@ResponseBody
     @LogMethod
-	public FundAccountingYieldData getCalculatedSecuritySECData(
+	public FundAccountingYieldData getCalculatedSecuritySECData(@RequestHeader("userId") String userId,
 			@RequestParam @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate)
 			throws FundAccountingYieldException {
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedSecuritySECData", Constants.USER_ID);
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedSecuritySECData", Constants.BUSINESS_DATE);
 		
 		StopWatch stopWatch = new StopWatch();
 		stopWatch.start();
 
-		final FundAccountingYieldData securitySECData = secYieldService.getCalculatedSecuritySECData(businessDate);
+		final FundAccountingYieldData securitySECData = secYieldService.getCalculatedSecuritySECData(userId, businessDate);
 		truncateResults(securitySECData);
 
 		stopWatch.stop();
@@ -156,6 +161,7 @@ public class SecuritySECYieldController {
 	/**
 	 * Exports SEC Security data in CSV format in a zip archive.
 	 * 
+	 * @param userId The user id passed in header.
 	 * @param businessDate
 	 *            the Business date
 	 * @param response
@@ -167,16 +173,17 @@ public class SecuritySECYieldController {
 	@ResponseStatus(HttpStatus.OK)
 	@ResponseBody
     @LogMethod
-	public void exportCalculatedSecuritySECData(
+	public void exportCalculatedSecuritySECData(@RequestHeader("userId") String userId, 
 			@RequestParam @DateTimeFormat(pattern = Constants.API_DATE_FORMAT) Date businessDate,
 			HttpServletResponse response) throws FundAccountingYieldException {
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "exportCalculatedSecuritySECData", Constants.USER_ID);
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "exportCalculatedSecuritySECData", Constants.BUSINESS_DATE);
 		CommonUtility.checkNull(response, this.getClass().getCanonicalName(), "exportCalculatedSecuritySECData", "response");
 		
 		StopWatch stopWatch = new StopWatch();
 		stopWatch.start();
 
-		secYieldService.exportCalculatedSecuritySECData(businessDate, response);
+		secYieldService.exportCalculatedSecuritySECData(userId, businessDate, response);
 
 		stopWatch.stop();
 		logger.info("METHOD: SecuritySECYieldController.exportCalculatedSecuritySECData(), RUNTIME: " +
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/DistributionFundYieldService.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/DistributionFundYieldService.java
index 2fcb5f8..2cecc0c 100644
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/DistributionFundYieldService.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/DistributionFundYieldService.java
@@ -13,21 +13,23 @@ public interface DistributionFundYieldService {
     /**
      * Process Distribution Fund data for the business date. This method gets the fund yield data and then process each
      * portfolio first to calculate the data, then to persist it using API.
+     * @param userId the user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData processDistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData processDistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException;
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id;
      * @param businessDate -the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedDistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException;
 }
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/MoneyMarketFundYieldService.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/MoneyMarketFundYieldService.java
index 8328755..b94be55 100644
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/MoneyMarketFundYieldService.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/MoneyMarketFundYieldService.java
@@ -13,21 +13,23 @@ public interface MoneyMarketFundYieldService {
     /**
      * Process SEC Security data for the business date. This method gets the fund acccounting yield data and then
      * process each portfolio first to calculate the data, then to persist it using API.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData processMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData processMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException;
 
     /**
      * Gets already calculated Money Market Fund Yield data for the given date.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
      * @throws FundAccountingYieldException in case any error during processing.
      */
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException;
 }
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/SecuritySECYieldService.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/SecuritySECYieldService.java
index e2a7a96..5f3958a 100755
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/SecuritySECYieldService.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/SecuritySECYieldService.java
@@ -23,6 +23,7 @@ public interface SecuritySECYieldService {
 	 * Process SEC Security data for the business data. This method gets the securities and then process each security
 	 * first to calculate the data, then to persist it using API.
 	 *
+	 * @param userId The user id;
 	 * @param businessDate
 	 *            the business date;
 	 * @return securitySECData with calculated result
@@ -32,12 +33,13 @@ public interface SecuritySECYieldService {
 	 * @throws FundAccountingYieldException
 	 *             any error during processing
 	 */
-	public FundAccountingYieldData processSecuritySECData(Date businessDate)
+	public FundAccountingYieldData processSecuritySECData(String userId, Date businessDate)
 			throws FundAccountingYieldException;
 
 	/**
 	 * Gets already calculated SEC Security data for the given date.
 	 *
+	 * @param userId The user id
 	 * @param businessDate
 	 *            the business date
 	 * @return already calculated securitySECData
@@ -47,12 +49,13 @@ public interface SecuritySECYieldService {
 	 * @throws FundAccountingYieldException
 	 *             any error during processing
 	 */
-	public FundAccountingYieldData getCalculatedSecuritySECData(Date businessDate)
+	public FundAccountingYieldData getCalculatedSecuritySECData(String userId, Date businessDate)
 			throws FundAccountingYieldException;
 
 	/**
 	 * Exports SEC Security data in CSV format in an archive.
 	 *
+	 * @param userId The user id
 	 * @param businessDate
 	 *            the business date
 	 * @param response
@@ -62,6 +65,6 @@ public interface SecuritySECYieldService {
 	 * @throws FundAccountingYieldException
 	 *             any error during processing
 	 */
-	public void exportCalculatedSecuritySECData(Date businessDate, HttpServletResponse response)
+	public void exportCalculatedSecuritySECData(String userId, Date businessDate, HttpServletResponse response)
 			throws FundAccountingYieldException;
 }
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImpl.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImpl.java
index ec50d90..20dce81 100644
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImpl.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImpl.java
@@ -1,15 +1,17 @@
 package com.csa.apex.fundyield.api.services.impl;
 
+import java.net.URI;
 import java.util.Date;
 import java.util.List;
 
 import javax.annotation.PostConstruct;
 import javax.annotation.Resource;
 
-import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
 import org.springframework.web.util.UriComponentsBuilder;
 
@@ -18,6 +20,7 @@ import com.csa.apex.fundyield.exceptions.ConfigurationException;
 import com.csa.apex.fundyield.exceptions.FundAccountingYieldException;
 import com.csa.apex.fundyield.fayacommons.entities.FundAccountingYieldData;
 import com.csa.apex.fundyield.utility.CommonUtility;
+import com.csa.apex.fundyield.utility.Constants;
 import com.csa.apex.fundyield.utility.LogMethod;
 
 /**
@@ -79,6 +82,7 @@ public class DistributionFundYieldServiceImpl extends BaseServiceImpl implements
     /**
      * Process Distribution Fund data for the business date. This method gets the fund yield data and then process it by
      * each engine and finally persists data using API.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -86,23 +90,29 @@ public class DistributionFundYieldServiceImpl extends BaseServiceImpl implements
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData processDistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData processDistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "processDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "processDistributionFundYieldData", Constants.BUSINESS_DATE);
         try {
-            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getFAYADistributionFundDataApiPath)
-                    .queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
-            FundAccountingYieldData fundAccountingYieldData = getRestTemplate()
-                    .getForObject(builder.build().encode().toUri(), FundAccountingYieldData.class);
-            for (CalculationEngine calcEngine : calculatorEngines) {
-                calcEngine.calculate(fundAccountingYieldData, getSECConfiguration());
-            }
-            Boolean saveResponse = getRestTemplate().exchange(saveCalculatedDistributionFundDataApiPath, HttpMethod.PUT,
-                    new HttpEntity<FundAccountingYieldData>(fundAccountingYieldData), Boolean.class).getBody();
-            if (saveResponse == null || !saveResponse) {
-                throw new FundAccountingYieldException("Fail to save fundAccountingYieldData");
-            }
-            return fundAccountingYieldData;
+			HttpHeaders headers = new HttpHeaders();
+			headers.set(Constants.USER_ID, userId);
+			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getFAYADistributionFundDataApiPath)
+					.queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
+			URI uri = builder.build().encode().toUri();
+			ResponseEntity<FundAccountingYieldData> responseEntity = getRestTemplate().exchange(uri, HttpMethod.GET,
+					new HttpEntity<>(headers), FundAccountingYieldData.class);
+			FundAccountingYieldData fundAccountingYieldData = responseEntity.getBody();
+
+			for (CalculationEngine calcEngine : calculatorEngines) {
+				calcEngine.calculate(fundAccountingYieldData, getSECConfiguration());
+			}
+			Boolean saveResponse = getRestTemplate().exchange(saveCalculatedDistributionFundDataApiPath, HttpMethod.PUT,
+					new HttpEntity<FundAccountingYieldData>(fundAccountingYieldData), Boolean.class).getBody();
+			if (saveResponse == null || !saveResponse) {
+				throw new FundAccountingYieldException("Fail to save fundAccountingYieldData");
+			}
+			return fundAccountingYieldData;
         } catch (Exception e) {
             throw new FundAccountingYieldException(e.getMessage());
         }
@@ -110,6 +120,7 @@ public class DistributionFundYieldServiceImpl extends BaseServiceImpl implements
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -117,13 +128,19 @@ public class DistributionFundYieldServiceImpl extends BaseServiceImpl implements
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedDistributionFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedDistributionFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedDistributionFundYieldData", Constants.BUSINESS_DATE);
         try {
-            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getCalculatedDistributionFundDataApiPath)
-                    .queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
-            return getRestTemplate().getForObject(builder.build().encode().toUri(), FundAccountingYieldData.class);
+            HttpHeaders headers = new HttpHeaders();
+			headers.set(Constants.USER_ID, userId);
+			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getCalculatedDistributionFundDataApiPath)
+					.queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
+			URI uri = builder.build().encode().toUri();
+			ResponseEntity<FundAccountingYieldData> responseEntity = getRestTemplate().exchange(uri, HttpMethod.GET,
+					new HttpEntity<>(headers), FundAccountingYieldData.class);
+			return responseEntity.getBody();
         } catch (Exception e) {
             throw new FundAccountingYieldException(e.getMessage());
         }
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImpl.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImpl.java
index f98c1dc..2e5bea7 100644
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImpl.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImpl.java
@@ -1,5 +1,6 @@
 package com.csa.apex.fundyield.api.services.impl;
 
+import java.net.URI;
 import java.util.Date;
 import java.util.List;
 
@@ -9,7 +10,9 @@ import javax.annotation.Resource;
 import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
 import org.springframework.web.util.UriComponentsBuilder;
 
@@ -81,6 +84,7 @@ public class MoneyMarketFundYieldServiceImpl extends BaseServiceImpl implements
     /**
      * Process Money Market Fund data for the business date. This method gets the fund yield data and then process it by
      * each engine and finally persists data using API.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -88,14 +92,20 @@ public class MoneyMarketFundYieldServiceImpl extends BaseServiceImpl implements
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData processMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData processMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
-        CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(),  "processMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "processMoneyMarketFundYieldData", Constants.USER_ID);
+    	CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(),  "processMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
         try {
-            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getFAYAMoneyMarketFundDataApiPath)
-                    .queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
-            FundAccountingYieldData fundAccountingYieldData = getRestTemplate()
-                    .getForObject(builder.build().encode().toUri(), FundAccountingYieldData.class);
+        	HttpHeaders headers = new HttpHeaders();
+			headers.set(Constants.USER_ID, userId);
+			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getFAYAMoneyMarketFundDataApiPath)
+					.queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
+			URI uri = builder.build().encode().toUri();
+			ResponseEntity<FundAccountingYieldData> responseEntity = getRestTemplate().exchange(uri, HttpMethod.GET,
+					new HttpEntity<>(headers), FundAccountingYieldData.class);
+			FundAccountingYieldData fundAccountingYieldData = responseEntity.getBody();
+        	
             for (CalculationEngine calcEngine : calculatorEngines) {
                 calcEngine.calculate(fundAccountingYieldData, getSECConfiguration());
             }
@@ -112,6 +122,7 @@ public class MoneyMarketFundYieldServiceImpl extends BaseServiceImpl implements
 
     /**
      * Gets already calculated Distribution Fund Yield data for the given date.
+     * @param userId The user id;
      * @param businessDate the business date;
      * @return FundAccountingYieldData with calculated result;
      * @throws IllegalArgumentException in case the input is invalid (null).
@@ -119,13 +130,19 @@ public class MoneyMarketFundYieldServiceImpl extends BaseServiceImpl implements
      */
     @Override
     @LogMethod
-    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(Date businessDate)
+    public FundAccountingYieldData getCalculatedMoneyMarketFundYieldData(String userId, Date businessDate)
             throws FundAccountingYieldException {
+    	CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldDatas", Constants.USER_ID);
         CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedMoneyMarketFundYieldData", Constants.BUSINESS_DATE);
         try {
-            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getCalculatedMoneyMarketFundDataApiPath)
-                    .queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
-            return getRestTemplate().getForObject(builder.build().encode().toUri(), FundAccountingYieldData.class);
+        	HttpHeaders headers = new HttpHeaders();
+			headers.set(Constants.USER_ID, userId);
+			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getCalculatedMoneyMarketFundDataApiPath)
+					.queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
+			URI uri = builder.build().encode().toUri();
+			ResponseEntity<FundAccountingYieldData> responseEntity = getRestTemplate().exchange(uri, HttpMethod.GET,
+					new HttpEntity<>(headers), FundAccountingYieldData.class);
+			return responseEntity.getBody();
         } catch (Exception e) {
             throw new FundAccountingYieldException(e.getMessage());
         }
diff --git a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImpl.java b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImpl.java
index 09fa266..55a00e0 100755
--- a/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImpl.java
+++ b/fundyield-api/src/main/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImpl.java
@@ -4,6 +4,7 @@
 package com.csa.apex.fundyield.api.services.impl;
 
 import java.io.IOException;
+import java.net.URI;
 import java.util.Arrays;
 import java.util.Date;
 import java.util.HashMap;
@@ -21,7 +22,9 @@ import com.csa.apex.fundyield.utility.Constants;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
 import org.springframework.web.util.UriComponentsBuilder;
 
@@ -137,6 +140,7 @@ public class SecuritySECYieldServiceImpl extends BaseServiceImpl implements Secu
 	/**
 	 * Gets already calculated FundAccountingYieldData data for the given date.
 	 *
+	 * @param userId The user id
 	 * @param businessDate
 	 *            the business date
 	 * @return FundAccountingYieldData for the date with calculated result
@@ -147,15 +151,19 @@ public class SecuritySECYieldServiceImpl extends BaseServiceImpl implements Secu
 	 */
 	@Override
 	@LogMethod
-	public FundAccountingYieldData getCalculatedSecuritySECData(Date businessDate) throws FundAccountingYieldException {
+	public FundAccountingYieldData getCalculatedSecuritySECData(String userId, Date businessDate) throws FundAccountingYieldException {
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "getCalculatedSecuritySECData", Constants.USER_ID);
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "getCalculatedSecuritySECData", PARAM_BUSINESS_DATE);
 
 		try {
+			HttpHeaders headers = new HttpHeaders();
+			headers.set(Constants.USER_ID, userId);
 			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getCalculatedSecuritySECDataApiPath)
 					.queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
-
-			FundAccountingYieldData data = getRestTemplate().getForObject(builder.build().encode().toUri(),
-					FundAccountingYieldData.class);
+			URI uri = builder.build().encode().toUri();
+			ResponseEntity<FundAccountingYieldData> responseEntity = getRestTemplate().exchange(uri, HttpMethod.GET,
+					new HttpEntity<>(headers), FundAccountingYieldData.class);
+			FundAccountingYieldData data = responseEntity.getBody();
 
 			// Throw DataNotFoundException if no data is returned
 			checkNullResponse(data, builder.toUriString());
@@ -173,6 +181,7 @@ public class SecuritySECYieldServiceImpl extends BaseServiceImpl implements Secu
 	 * securities and then process each security first to calculate the data,
 	 * then to persist it using API.
 	 * 
+	 * @param userId The user id
 	 * @param businessDate
 	 *            the business date
 	 * @return FundAccountingYieldData with calculated result
@@ -183,15 +192,19 @@ public class SecuritySECYieldServiceImpl extends BaseServiceImpl implements Secu
 	 */
 	@Override
 	@LogMethod
-	public FundAccountingYieldData processSecuritySECData(Date businessDate) throws FundAccountingYieldException {
+	public FundAccountingYieldData processSecuritySECData(String userId, Date businessDate) throws FundAccountingYieldException {
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "processSecuritySECData", PARAM_BUSINESS_DATE);
+		CommonUtility.checkString(userId, this.getClass().getCanonicalName(), "processSecuritySECData", Constants.USER_ID);
 
 		try {
+			HttpHeaders headers = new HttpHeaders();
+			headers.set(Constants.USER_ID, userId);
 			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(getSecuritySECDataApiPath)
 					.queryParam(Constants.BUSINESS_DATE, getFormattedDate(businessDate));
-
-			FundAccountingYieldData data = getRestTemplate().getForObject(builder.build().encode().toUri(),
-					FundAccountingYieldData.class);
+			URI uri = builder.build().encode().toUri();
+			ResponseEntity<FundAccountingYieldData> responseEntity = getRestTemplate().exchange(uri, HttpMethod.GET,
+					new HttpEntity<>(headers), FundAccountingYieldData.class);
+			FundAccountingYieldData data = responseEntity.getBody();
 			
 			// Throw DataNotFoundException if no data is returned
 			checkNullResponse(data, builder.toUriString());
@@ -223,6 +236,7 @@ public class SecuritySECYieldServiceImpl extends BaseServiceImpl implements Secu
 	/**
 	 * Exports SEC Security data in CSV format in an archive.
 	 * 
+	 * @param userId The user id
 	 * @param businessDate
 	 *            the business date;
 	 * @param response
@@ -234,12 +248,12 @@ public class SecuritySECYieldServiceImpl extends BaseServiceImpl implements Secu
 	 */
 	@Override
 	@LogMethod
-	public void exportCalculatedSecuritySECData(Date businessDate, HttpServletResponse response)
+	public void exportCalculatedSecuritySECData(String userId, Date businessDate, HttpServletResponse response)
 			throws FundAccountingYieldException {
 		CommonUtility.checkNull(businessDate, this.getClass().getCanonicalName(), "exportCalculatedSecuritySECData", PARAM_BUSINESS_DATE);
 		CommonUtility.checkNull(response, this.getClass().getCanonicalName(), "exportCalculatedSecuritySECData", Constants.PARAMETER_RESPONSE);
 
-		FundAccountingYieldData data = getCalculatedSecuritySECData(businessDate);
+		FundAccountingYieldData data = getCalculatedSecuritySECData(userId, businessDate);
 
 		try {
 			createExportArchive(response, data, getFormattedDate(businessDate));
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/DistributionFundYiedControllerTest.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/DistributionFundYiedControllerTest.java
index e25d8fd..497a492 100644
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/DistributionFundYiedControllerTest.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/DistributionFundYiedControllerTest.java
@@ -15,6 +15,8 @@ import java.util.ArrayList;
 import java.util.Date;
 
 import com.csa.apex.fundyield.utility.Constants;
+import com.csa.apex.fundyield.utility.TestUtility;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -77,7 +79,8 @@ public class DistributionFundYiedControllerTest {
 		when(builder.build()).thenReturn(c);
 		when(c.encode()).thenReturn(c);
 		when(c.toUri()).thenReturn(uri);
-		when(restTemplate.getForObject(any(URI.class), eq(FundAccountingYieldData.class))).thenReturn(data);
+		when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(FundAccountingYieldData.class)))
+				.thenReturn(new ResponseEntity<FundAccountingYieldData>(data, new HttpHeaders(), HttpStatus.CREATED));
 		when(restTemplate.exchange(any(String.class), eq(HttpMethod.PUT), any(HttpEntity.class), eq(Boolean.class)))
 				.thenReturn(new ResponseEntity<Boolean>(true, new HttpHeaders(), HttpStatus.CREATED));
 
@@ -92,12 +95,11 @@ public class DistributionFundYiedControllerTest {
 	 * @throws Exception
 	 *             if any exception occurs
 	 */
-	
 	@Test
 	public void getDistributionFundYieldData() throws Exception {
 		DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-		distributionFundYiedController.getDistributionFundYieldData(businessDate);
+		distributionFundYiedController.getDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate);
 	}
 
 	/**
@@ -106,10 +108,20 @@ public class DistributionFundYiedControllerTest {
 	 * @throws Exception
 	 *             if any exception occurs
 	 */
-	
 	@Test(expected = IllegalArgumentException.class)
 	public void getDistributionFundYieldDataInvalid() throws Exception {
-		distributionFundYiedController.getDistributionFundYieldData(null);
+		distributionFundYiedController.getDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+	}
+	
+	/**
+	 * Test getDistributionFundYieldData with invalid user id.
+	 * 
+	 * @throws Exception
+	 *             if any exception occurs
+	 */
+	@Test(expected = IllegalArgumentException.class)
+	public void getDistributionFundYieldDataInvalidUserId() throws Exception {
+		distributionFundYiedController.getDistributionFundYieldData(null, new Date());
 	}
 	
 	/**
@@ -122,8 +134,9 @@ public class DistributionFundYiedControllerTest {
 	public void getCalculatedDistributionFundYieldData() throws Exception {
 		DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-		distributionFundYiedController.getCalculatedDistributionFundYieldData(businessDate);
+		distributionFundYiedController.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate);
 	}
+	
 	/**
 	 * Test getCalculatedDistributionFundYieldData with invalid data.
 	 * 
@@ -132,6 +145,17 @@ public class DistributionFundYiedControllerTest {
 	 */
 	@Test(expected = IllegalArgumentException.class)
 	public void getCalculatedDistributionFundYieldDataInvalid() throws Exception {
-		distributionFundYiedController.getCalculatedDistributionFundYieldData(null);
+		distributionFundYiedController.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+	}
+	
+	/**
+	 * Test getCalculatedDistributionFundYieldData with invalid user id.
+	 * 
+	 * @throws Exception
+	 *             if any exception occurs
+	 */
+	@Test(expected = IllegalArgumentException.class)
+	public void getCalculatedDistributionFundYieldDataInvalidUserId() throws Exception {
+		distributionFundYiedController.getCalculatedDistributionFundYieldData(null, new Date());
 	}
 }
\ No newline at end of file
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldControllerTest.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldControllerTest.java
index 5857bb0..5cf6c7e 100644
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldControllerTest.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/MoneyMarketFundYieldControllerTest.java
@@ -15,6 +15,8 @@ import java.util.ArrayList;
 import java.util.Date;
 
 import com.csa.apex.fundyield.utility.Constants;
+import com.csa.apex.fundyield.utility.TestUtility;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -50,6 +52,7 @@ public class MoneyMarketFundYieldControllerTest {
 	 * MoneyMarketFundYieldController to be tested.
 	 */
 	MoneyMarketFundYieldController moneyMarketFundYieldController;
+
 	/**
 	 * Mock Setup.
 	 * 
@@ -76,7 +79,8 @@ public class MoneyMarketFundYieldControllerTest {
 		when(builder.build()).thenReturn(c);
 		when(c.encode()).thenReturn(c);
 		when(c.toUri()).thenReturn(uri);
-		when(restTemplate.getForObject(any(URI.class), eq(FundAccountingYieldData.class))).thenReturn(data);
+		when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(FundAccountingYieldData.class)))
+				.thenReturn(new ResponseEntity<FundAccountingYieldData>(data, new HttpHeaders(), HttpStatus.CREATED));
 		when(restTemplate.exchange(any(String.class), eq(HttpMethod.PUT), any(HttpEntity.class), eq(Boolean.class)))
 				.thenReturn(new ResponseEntity<Boolean>(true, new HttpHeaders(), HttpStatus.CREATED));
 
@@ -85,7 +89,6 @@ public class MoneyMarketFundYieldControllerTest {
 		moneyMarketFundYieldController.setMoneyMarketFundYieldService(moneyMarketFundYieldServiceImpl);
 	}
 	
-	
     /**
      * Test for method getMoneyMarketFundYieldData.
      *
@@ -95,8 +98,9 @@ public class MoneyMarketFundYieldControllerTest {
     public void getMoneyMarketFundYieldData() throws Exception {
     	DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        moneyMarketFundYieldController.getMoneyMarketFundYieldData(businessDate);
+        moneyMarketFundYieldController.getMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate);
     }
+    
     /**
      * Test for method getMoneyMarketFundYieldData with invalid data.
      *
@@ -104,8 +108,19 @@ public class MoneyMarketFundYieldControllerTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getMoneyMarketFundYieldDataInvalid() throws Exception {
-        moneyMarketFundYieldController.getMoneyMarketFundYieldData(null);
+        moneyMarketFundYieldController.getMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getMoneyMarketFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+        moneyMarketFundYieldController.getMoneyMarketFundYieldData(null, new Date());
     }
+    
     /**
      * Test for method getCalculatedMoneyMarketFundYieldData.
      *
@@ -115,8 +130,9 @@ public class MoneyMarketFundYieldControllerTest {
     public void getCalculatedMoneyMarketFundYieldData() throws Exception {
     	DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        moneyMarketFundYieldController.getCalculatedMoneyMarketFundYieldData(businessDate);
+        moneyMarketFundYieldController.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate);
     }
+    
     /**
      * Test for method getCalculatedMoneyMarketFundYieldData with invalid data.
      *
@@ -124,6 +140,16 @@ public class MoneyMarketFundYieldControllerTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedMoneyMarketFundYieldDataInvalid() throws Exception {
-        moneyMarketFundYieldController.getCalculatedMoneyMarketFundYieldData(null);
+        moneyMarketFundYieldController.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getCalculatedMoneyMarketFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+        moneyMarketFundYieldController.getCalculatedMoneyMarketFundYieldData(null, new Date());
     }
 }
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/SecuritySECYieldControllerTest.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/SecuritySECYieldControllerTest.java
index 474d6bc..5d18fee 100755
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/SecuritySECYieldControllerTest.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/SecuritySECYieldControllerTest.java
@@ -86,8 +86,8 @@ public class SecuritySECYieldControllerTest {
 	@Before
 	public void setUp() throws FundAccountingYieldException, ParseException {
 		MockitoAnnotations.initMocks(this);
-		when(secYieldServiceImpl.processSecuritySECData(any(Date.class))).thenReturn(utility.constructFAYAData());
-		when(secYieldServiceImpl.getCalculatedSecuritySECData(any(Date.class)))
+		when(secYieldServiceImpl.processSecuritySECData(any(String.class), any(Date.class))).thenReturn(utility.constructFAYAData());
+		when(secYieldServiceImpl.getCalculatedSecuritySECData(any(String.class), any(Date.class)))
 				.thenReturn(utility.constructFAYAData());
 		this.mockMvc = MockMvcBuilders.standaloneSetup(seyYieldController).build();
 	}
@@ -100,7 +100,8 @@ public class SecuritySECYieldControllerTest {
 	 */
 	@Test
 	public void getSecuritySECDataTest() throws Exception {
-		mockMvc.perform(get("/fundAccountingSECYieldData").param(Constants.BUSINESS_DATE, "2016-05-02")).andExpect(status().isOk())
+		mockMvc.perform(get("/fundAccountingSECYieldData").header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID)
+				.param(Constants.BUSINESS_DATE, "2016-05-02")).andExpect(status().isOk())
 				.andExpect(content().contentType(APPLICATION_JSON_CONTENT_TYPE));
 	}
 
@@ -112,7 +113,8 @@ public class SecuritySECYieldControllerTest {
 	 */
 	@Test
 	public void getCalculatedSecuritySECDataTest() throws Exception {
-		mockMvc.perform(get("/calculatedFundAccountingSECYieldData").param(Constants.BUSINESS_DATE, "2016-05-02"))
+		mockMvc.perform(get("/calculatedFundAccountingSECYieldData")
+				.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.BUSINESS_DATE, "2016-05-02"))
 				.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JSON_CONTENT_TYPE));
 	}
 
@@ -124,7 +126,8 @@ public class SecuritySECYieldControllerTest {
 	 */
 	@Test
 	public void exportCalculatedSecuritySECDataSuccessTest() throws Exception {
-		mockMvc.perform(get("/exportCalculatedFundAccountingSECYieldData").param(Constants.BUSINESS_DATE, "2016-05-02"))
+		mockMvc.perform(get("/exportCalculatedFundAccountingSECYieldData")
+				.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.BUSINESS_DATE, "2016-05-02"))
 				.andExpect(status().isOk());
 	}
 
@@ -136,7 +139,8 @@ public class SecuritySECYieldControllerTest {
 	 */
 	@Test
 	public void exportCalculatedSecuritySECDataInvalidTest() throws Exception {
-		this.mockMvc.perform(get("/exportCalculatedFundAccountingSECYieldData").param(Constants.BUSINESS_DATE, "invalid"))
+		this.mockMvc.perform(get("/exportCalculatedFundAccountingSECYieldData")
+				.header(Constants.USER_ID, TestUtility.DEFAULT_USER_ID).param(Constants.BUSINESS_DATE, "invalid"))
 				.andExpect(status().is(400));
 	}
 }
\ No newline at end of file
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImplTest.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImplTest.java
index 1dbe4a9..44215ae 100644
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImplTest.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/DistributionFundYieldServiceImplTest.java
@@ -18,6 +18,8 @@ import java.util.ArrayList;
 import java.util.Date;
 
 import com.csa.apex.fundyield.utility.Constants;
+import com.csa.apex.fundyield.utility.TestUtility;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -79,13 +81,15 @@ public class DistributionFundYieldServiceImplTest {
 		when(builder.build()).thenReturn(c);
 		when(c.encode()).thenReturn(c);
 		when(c.toUri()).thenReturn(uri);
-		when(restTemplate.getForObject(any(URI.class), eq(FundAccountingYieldData.class))).thenReturn(data);
+		when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(FundAccountingYieldData.class)))
+				.thenReturn(new ResponseEntity<FundAccountingYieldData>(data, new HttpHeaders(), HttpStatus.CREATED));
 		when(restTemplate.exchange(any(String.class), eq(HttpMethod.PUT), any(HttpEntity.class), eq(Boolean.class)))
 				.thenReturn(new ResponseEntity<Boolean>(true, new HttpHeaders(), HttpStatus.CREATED));
 
 		distributionFundYieldServiceImpl.setRestTemplate(restTemplate);
 	}
-    /**
+    
+	/**
      * Test for method processDistributionFundYieldData.
      *
      * @throws Exception to JUnit
@@ -94,8 +98,9 @@ public class DistributionFundYieldServiceImplTest {
     public void processDistributionFundYieldData() throws Exception {
 		DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-		assertNotNull(distributionFundYieldServiceImpl.processDistributionFundYieldData(businessDate));
+		assertNotNull(distributionFundYieldServiceImpl.processDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
+    
     /**
      * Test for method processDistributionFundYieldData with invalid data.
      *
@@ -103,7 +108,17 @@ public class DistributionFundYieldServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void processDistributionFundYieldDataInvalid() throws Exception {
-        distributionFundYieldServiceImpl.processDistributionFundYieldData(null);
+        distributionFundYieldServiceImpl.processDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method processDistributionFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void processDistributionFundYieldDataInvalidUserId() throws Exception {
+        distributionFundYieldServiceImpl.processDistributionFundYieldData(null, new Date());
     }
     
     /**
@@ -115,8 +130,9 @@ public class DistributionFundYieldServiceImplTest {
     public void getCalculatedDistributionFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        assertNotNull(distributionFundYieldServiceImpl.getCalculatedDistributionFundYieldData(businessDate));
+        assertNotNull(distributionFundYieldServiceImpl.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
+    
     /**
      * Test for method getCalculatedDistributionFundYieldData with invalid data.
      *
@@ -124,7 +140,17 @@ public class DistributionFundYieldServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedDistributionFundYieldDataInvalid() throws Exception {
-    	distributionFundYieldServiceImpl.getCalculatedDistributionFundYieldData(null);
+    	distributionFundYieldServiceImpl.getCalculatedDistributionFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getCalculatedDistributionFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedDistributionFundYieldDataInvalidUserId() throws Exception {
+    	distributionFundYieldServiceImpl.getCalculatedDistributionFundYieldData(null, new Date());
     }
   
 }
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImplTest.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImplTest.java
index ff8d652..d89e0ac 100644
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImplTest.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/MoneyMarketFundYieldServiceImplTest.java
@@ -18,6 +18,8 @@ import java.util.ArrayList;
 import java.util.Date;
 
 import com.csa.apex.fundyield.utility.Constants;
+import com.csa.apex.fundyield.utility.TestUtility;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -78,13 +80,15 @@ public class MoneyMarketFundYieldServiceImplTest {
 		when(builder.build()).thenReturn(c);
 		when(c.encode()).thenReturn(c);
 		when(c.toUri()).thenReturn(uri);
-		when(restTemplate.getForObject(any(URI.class), eq(FundAccountingYieldData.class))).thenReturn(data);
+		when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(FundAccountingYieldData.class)))
+				.thenReturn(new ResponseEntity<FundAccountingYieldData>(data, new HttpHeaders(), HttpStatus.CREATED));
 		when(restTemplate.exchange(any(String.class), eq(HttpMethod.PUT), any(HttpEntity.class), eq(Boolean.class)))
 				.thenReturn(new ResponseEntity<Boolean>(true, new HttpHeaders(), HttpStatus.CREATED));
 
 		moneyMarketFundYieldServiceImpl.setRestTemplate(restTemplate);
 	}
-    /**
+    
+	/**
      * Test for method processMoneyMarketFundYieldData.
      *
      * @throws Exception to JUnit
@@ -93,8 +97,9 @@ public class MoneyMarketFundYieldServiceImplTest {
     public void processMoneyMarketFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        assertNotNull(moneyMarketFundYieldServiceImpl.processMoneyMarketFundYieldData(businessDate));
+        assertNotNull(moneyMarketFundYieldServiceImpl.processMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
+    
     /**
      * Test for method processMoneyMarketFundYieldData with invalid data.
      *
@@ -102,8 +107,19 @@ public class MoneyMarketFundYieldServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void processMoneyMarketFundYieldDataInvalid() throws Exception {
-    	moneyMarketFundYieldServiceImpl.processMoneyMarketFundYieldData(null);
+    	moneyMarketFundYieldServiceImpl.processMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
     }
+    
+    /**
+     * Test for method processMoneyMarketFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void processMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+    	moneyMarketFundYieldServiceImpl.processMoneyMarketFundYieldData(null, new Date());
+    }
+    
     /**
      * Test for method getCalculatedMoneyMarketFundYieldData.
      *
@@ -113,8 +129,9 @@ public class MoneyMarketFundYieldServiceImplTest {
     public void getCalculatedMoneyMarketFundYieldData() throws Exception {
         DateFormat f = new SimpleDateFormat(Constants.API_DATE_FORMAT);
         Date businessDate = f.parse("2016-12-10");
-        assertNotNull(moneyMarketFundYieldServiceImpl.getCalculatedMoneyMarketFundYieldData(businessDate));
+        assertNotNull(moneyMarketFundYieldServiceImpl.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, businessDate));
     }
+    
     /**
      * Test for method getCalculatedMoneyMarketFundYieldData with invalid data.
      *
@@ -122,6 +139,16 @@ public class MoneyMarketFundYieldServiceImplTest {
      */
     @Test(expected = IllegalArgumentException.class)
     public void getCalculatedMoneyMarketFundYieldDataInvalid() throws Exception {
-    	moneyMarketFundYieldServiceImpl.getCalculatedMoneyMarketFundYieldData(null);
+    	moneyMarketFundYieldServiceImpl.getCalculatedMoneyMarketFundYieldData(TestUtility.DEFAULT_USER_ID, null);
+    }
+    
+    /**
+     * Test for method getCalculatedMoneyMarketFundYieldData with invalid user id.
+     *
+     * @throws Exception to JUnit
+     */
+    @Test(expected = IllegalArgumentException.class)
+    public void getCalculatedMoneyMarketFundYieldDataInvalidUserId() throws Exception {
+    	moneyMarketFundYieldServiceImpl.getCalculatedMoneyMarketFundYieldData(null, new Date());
     }
 }
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImplTest.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImplTest.java
index 841c49a..9e326a3 100755
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImplTest.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/api/services/impl/SecuritySECYieldServiceImplTest.java
@@ -130,7 +130,8 @@ public class SecuritySECYieldServiceImplTest {
 		MockitoAnnotations.initMocks(this);
 		when(restTemplate.getForObject(any(String.class), eq(SECConfiguration.class)))
 				.thenReturn(new SECConfiguration());
-		when(restTemplate.getForObject(any(URI.class), eq(FundAccountingYieldData.class))).thenReturn(data);
+		when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(FundAccountingYieldData.class)))
+				.thenReturn(new ResponseEntity<FundAccountingYieldData>(data, new HttpHeaders(), HttpStatus.CREATED));
 		when(restTemplate.exchange(any(String.class), eq(HttpMethod.PUT), any(HttpEntity.class), eq(Boolean.class)))
 				.thenReturn(new ResponseEntity<Boolean>(true, new HttpHeaders(), HttpStatus.CREATED));
 
@@ -145,7 +146,7 @@ public class SecuritySECYieldServiceImplTest {
 	 */
 	@Test
 	public void processSecuritySECDataTest() throws Exception {
-		FundAccountingYieldData data = securitySECYieldServiceImpl.processSecuritySECData(new Date());
+		FundAccountingYieldData data = securitySECYieldServiceImpl.processSecuritySECData(TestUtility.DEFAULT_USER_ID, new Date());
 
 		assertEquals(
 				CommonUtility.getTradableEntitySnapshot(data.getInstruments().get(0)).getDerOneDaySecurityYield()
@@ -163,7 +164,7 @@ public class SecuritySECYieldServiceImplTest {
 	 */
 	@Test
 	public void getCalculatedSecuritySECDataMockTest() throws Exception {
-		FundAccountingYieldData data = securitySECYieldServiceImpl.getCalculatedSecuritySECData(new Date());
+		FundAccountingYieldData data = securitySECYieldServiceImpl.getCalculatedSecuritySECData(TestUtility.DEFAULT_USER_ID, new Date());
 		assertEquals(data.getInstruments().size(), 1);
 		assertEquals(data.getPortfolios().size(), 1);
 	}
@@ -179,7 +180,7 @@ public class SecuritySECYieldServiceImplTest {
 		HttpServletResponse response = mock(HttpServletResponse.class);
 		MockServletOutputStream servletOutputStream = new MockServletOutputStream();
 		when(response.getOutputStream()).thenReturn(servletOutputStream);
-		securitySECYieldServiceImpl.exportCalculatedSecuritySECData(new Date(), response);
+		securitySECYieldServiceImpl.exportCalculatedSecuritySECData(TestUtility.DEFAULT_USER_ID, new Date(), response);
 		verify(response).setContentType(EXPORT_FILE_TYPE);
 		final File csvFile = convertServletOutputStreamToFile(servletOutputStream);
 		try {
diff --git a/fundyield-api/src/test/java/com/csa/apex/fundyield/utility/TestUtility.java b/fundyield-api/src/test/java/com/csa/apex/fundyield/utility/TestUtility.java
index 2598210..75f76c3 100755
--- a/fundyield-api/src/test/java/com/csa/apex/fundyield/utility/TestUtility.java
+++ b/fundyield-api/src/test/java/com/csa/apex/fundyield/utility/TestUtility.java
@@ -46,6 +46,11 @@ import com.csa.apex.fundyield.api.services.impl.utility.UtilityFAYAAPIClient;
 public class TestUtility {
 
     /**
+     * User Id for tests
+     */
+    public static final String DEFAULT_USER_ID = "U53R1D";
+	
+    /**
      * Inject field value.
      * @param obj The object
      * @param fieldName The field name
