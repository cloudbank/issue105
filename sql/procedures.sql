--------------------------------------------------------
--  DDL for Type INSTRUMENT_SIDS_RECORD
--------------------------------------------------------

CREATE OR REPLACE TYPE INSTRUMENT_SIDS_RECORD AS OBJECT (
  INSTRUMENT_SID                NUMBER(38,0),
  TRADABLE_ENTITY_SID           NUMBER(38,0)
);
/
--------------------------------------------------------
--  DDL for Type INSTRUMENT_SIDS_TABLE
--------------------------------------------------------

CREATE OR REPLACE TYPE INSTRUMENT_SIDS_TABLE AS TABLE OF INSTRUMENT_SIDS_RECORD;
/
--------------------------------------------------------
--  DDL for Type PORTFOLIO_SIDS_RECORD
--------------------------------------------------------

CREATE OR REPLACE TYPE PORTFOLIO_SIDS_RECORD AS OBJECT (
  PORTFOLIO_SID       NUMBER(38,0),
  SHARE_CLASS_SID     NUMBER(38,0),
  TRADABLE_ENTITY_SID NUMBER(38,0)
);
/
--------------------------------------------------------
--  DDL for Type PORTFOLIO_SIDS_TABLE
--------------------------------------------------------

CREATE OR REPLACE TYPE PORTFOLIO_SIDS_TABLE AS TABLE OF PORTFOLIO_SIDS_RECORD;
/

CREATE OR REPLACE TYPE INSTRUMENT_T AS OBJECT 
(
   INSTRUMENT_SID       INTEGER,
   INSTRUMENT_ID        INTEGER,
   INSTRUMENT_SHORT_NM  VARCHAR2(255),
   INSTRUMENT_TYPE_CD   VARCHAR2(12),
   COUPON_RATE_TYPE_CD  VARCHAR2(12),
   CUSIP                VARCHAR2(30),
   PRE_REFUNDED_DT      DATE,
   DIVIDEND_PAYMENT_FREQUENCY_NBR NUMBER(38,3),
   FDR_EQUITY_IND       VARCHAR2(1),
   ORIGINAL_ISSUE_PRC   NUMBER(38,9),
   FDR_STEP_BOND_IND    VARCHAR2(1),
   DER_INSTRUMENT_CLASS_NM VARCHAR2(100),
   PROSPECTIVE_YIELD_METHOD_CD VARCHAR2(10),
   FINAL_MATURITY_DT    DATE,
   HYBRID_CALCULATION_CD VARCHAR2(12),
   ORIGINAL_ISSUE_DT    DATE,
   MATURITY_PRC         NUMBER(38,8),
   DEFAULT_IND          VARCHAR2(1),
   EFFECTIVE_DT         DATE,
   EXPIRATION_DT        DATE,
   HASH_KEY_TXT         VARCHAR2(500),
   DER_FOF_SECURITY_CD  VARCHAR2(12),
   PARTNERSHIP_TYPE_CD  VARCHAR2(50),
   INCOME_TRUST_TYPE_CD VARCHAR2(50),
   TAX_EXCL_LOC_CD      VARCHAR2(12),
   CREATE_ID            VARCHAR2(30),
   CREATE_TS            TIMESTAMP(6),
   UPDATE_ID            VARCHAR2(30),
   UPDATE_TS            TIMESTAMP(6)
);
/

CREATE OR REPLACE TYPE TRADABLE_ENTITY_T AS OBJECT 
(
   TRADABLE_ENTITY_SID  INTEGER,
   TRADABLE_ENTITY_ID   NUMBER(20,0),
   INSTRUMENT_SID       INTEGER,
   MARKET_EXCHANGE_CD   VARCHAR2(12),
   TRADABLE_ENTITY_INTERNAL_ID VARCHAR2(30),
   EFFECTIVE_DT         DATE,
   EXPIRATION_DT        DATE,
   HASH_KEY_TXT         VARCHAR2(500),
   CREATE_ID            VARCHAR2(30),
   CREATE_TS            TIMESTAMP(6),
   UPDATE_ID            VARCHAR2(30),
   UPDATE_TS            TIMESTAMP(6)
);
/

CREATE OR REPLACE TYPE PORTFOLIO_T AS OBJECT 
(
   PORTFOLIO_SID        INTEGER,
   PORTFOLIO_ID         NUMBER(20),
   PORTFOLIO_SHORT_NM   VARCHAR2(30),
   PORTFOLIO_NM         VARCHAR2(50),
   FDR_DISTRIBUTION_ELIGIBLE_IND VARCHAR2(1),
   FDR_PORTFOLIO_TYPE_CD VARCHAR2(50),
   EFFECTIVE_DT         DATE,
   EXPIRATION_DT        DATE,
   HASH_KEY_TXT         VARCHAR2(500),
   CUSIP                VARCHAR2(30),
   FRIDAY_FORWARD_IND   VARCHAR2(1),
   PORTFOLIO_STATUS_IND VARCHAR2(1),
   ACCOUNTING_PORTFOLIO_GROUP_CD VARCHAR2(10),
   FUND_OF_FUND_IND     VARCHAR2(1),
   FIRS_PORTFOLIO_GROUP_CD VARCHAR2(10),
   CALCULATE_SEC_YIELD_IND VARCHAR2(1),
   CALCULATE_MILRATE_IND VARCHAR2(1),
   FISCAL_YEAR_END_DT   DATE,
   CREATE_ID            VARCHAR2(30),
   CREATE_TS            TIMESTAMP(6),
   UPDATE_ID            VARCHAR2(30),
   UPDATE_TS            TIMESTAMP(6)
);
/
--------------------------------------------------------
--  DDL for Type PORTFOLIO_HOLDING_T
--------------------------------------------------------

CREATE OR REPLACE TYPE PORTFOLIO_HOLDING_T AS OBJECT 
(
    PORTFOLIO_HOLDING_SNAPSHOT_SID INTEGER,
    REPORTING_DT DATE,
    TRADABLE_ENTITY_SID INTEGER,
    PORTFOLIO_SID INTEGER,
    HOLDING_BUSINESS_GROUP_VIEW_CD VARCHAR2(12 BYTE),
    HOLDING_VIEW_CD VARCHAR2(12 BYTE),
    POSITION_CD VARCHAR2(12 BYTE),
    TRADABLE_ENTITY_ID NUMBER(20, 0),
    ACCRUED_INCOME_AMT NUMBER(38, 9),  
    EARNED_AMORT_BASE_AMT NUMBER(38, 9),  
    EARNED_INFL_CMPS_BASE_AMT NUMBER(38, 9),  
    MARKET_VALUE_BASE_AMT NUMBER(38, 9),  
    INFLATION_ADJ_SHARE_CNT NUMBER(38, 9),  
    SETTLE_SHARE_CNT NUMBER(38, 9),  
    ORIGINAL_FACE_SHARE_QTY NUMBER(38, 9),  
    FX_RT NUMBER(38, 9),  
    DER_SEC_YIELD_1_DAY_INCOME_AMT NUMBER(38, 9),  
    ADJ_DER_SEC_YIELD_1DAY_INC_AMT NUMBER(38, 9),  
    ADJ_DER_MARKET_VALUE_BASE_AMT NUMBER(38, 9),  
    ADJ_SETTLE_SHARE_CNT NUMBER(38, 9),  
    ADJ_ACCRUED_INCOME_AMT NUMBER(38, 9),  
    ADJ_EARNED_AMORT_BASE_AMT NUMBER(38, 9),  
    ADJ_EARNED_INFL_CMPS_BASE_AMT NUMBER(38, 9),  
    ADJ_COMMENTS_TXT VARCHAR2(1000 BYTE),  
    LAST_ADJ_USER_ID VARCHAR2(30 BYTE),
    LAST_ADJ_TS TIMESTAMP(6),
    LAST_ADJ_APPROVAL_STATUS_CD VARCHAR2(20 BYTE),  
    LAST_ADJ_APPROVER_USER_ID VARCHAR2(30 BYTE),
    LAST_ADJ_APPROVAL_TS TIMESTAMP(6),  
    CREATE_ID VARCHAR2(30 BYTE),
    CREATE_TS TIMESTAMP(6),
    UPDATE_ID VARCHAR2(30 BYTE),  
    UPDATE_TS TIMESTAMP(6) 
);
/
--------------------------------------------------------
--  DDL for Type PORTFOLIO_SNAPSHOT_T
--------------------------------------------------------

CREATE OR REPLACE TYPE PORTFOLIO_SNAPSHOT_T AS OBJECT 
(
    PORTFOLIO_SNAPSHOT_SID INTEGER,
    REPORTING_DT DATE,
    DER_PORTFOLIO_TIER_NBR INTEGER,
    PORTFOLIO_SID INTEGER,
    FDR_SEC_EXPENSE_AMT NUMBER(38, 2),
    FDR_SEC_TOTAL_INCOME_AMT NUMBER(38, 2),
    DER_SEC_1_DAY_YIELD_PCT NUMBER(38,2),
    DER_SEC_30_DAY_YIELD_PCT NUMBER(38, 2),
    DER_SEC_RESTATED_YIELD_PCT NUMBER(38, 2),
    FDR_SEC_MIL_ADJ_PCT NUMBER(38, 9),
    FDR_N1A_TOT_GROS_INC_UNMOD_AMT NUMBER(38, 2),
    FDR_N1A_OOSP_DIST_INCOME_AMT NUMBER(38, 2),
    FDR_N1A_OOSP_DIST_AMORT_AMT NUMBER(38, 2),
    FDR_N1A_NET_OOSP_DIST_INC_AMT NUMBER(38, 2),
    FDR_N1A_OOSP_GROS_DIST_INC_PCT NUMBER(38, 3),
    FDR_PORTFOLIO_STATE_TAX_RT NUMBER(38, 3),
    ADJ_DER_SEC_1_DAY_YIELD_PCT NUMBER(38, 2),
    ADJ_DER_SEC_30_DAY_YIELD_PCT NUMBER(38, 2),
    DER_SEC_YIELD_PME_CHG_PCT NUMBER(38, 3),
    DER_RST_SEC_YIELD_PME_CHG_PCT NUMBER(38, 3),
    DER_MM_7_DAY_YLD_PME_CHG_PCT NUMBER(38, 3),
    DER_MM_30_DAY_YLD_PME_CHG_PCT NUMBER(38, 3),
    DER_MM_GROSS_YIELD_DOD_CHG_PCT NUMBER(38, 3),
    DER_MM_RST_7D_YLD_DOD_CHG_PCT NUMBER(38, 3),
    DER_DIST_1D_YLD_C2C_CMPR_PCT NUMBER(38, 3),
    DER_DIST_30D_YLD_C2C_CMPR_PCT NUMBER(38, 3),
    DER_DIST_1_DAY_YLD_PME_CHG_PCT NUMBER(38, 3),
    DER_DIST_30D_YLD_CHG_PME_PCT NUMBER(38, 3),
    DER_DIST_12MO_YLD_CHG_PME_PCT NUMBER(38, 3),
    MM_1DAY_GROSS_YIELD_PCT NUMBER(38, 3),
    MM_1DAY_DIST_YIELD_PCT NUMBER(38, 3),
    MM_N1A_STATE_TAX_RT NUMBER(38, 3),
    FDR_DISTRIBUTABLE_CAPSTOCK_QTY NUMBER(38, 9),
    DER_SEC_1_DAY_MIL_RT NUMBER(38, 9),
    DER_SEC_30_DAY_MIL_RT NUMBER(38, 9),
    ADJ_TO_SEC_YIELD_PCT NUMBER(38, 3),
    FDR_FUND_SECLENDING_INC_AMT NUMBER(38, 2),
    FDR_SEC_TOT_EXP_POOLED_UP_AMT NUMBER(38, 2),
    CREATE_ID VARCHAR2(30 BYTE),
    CREATE_TS TIMESTAMP(6),
    UPDATE_ID VARCHAR2(30 BYTE),
    UPDATE_TS TIMESTAMP(6) 
);
/
--------------------------------------------------------
--  DDL for Type SHARE_CLASS_SNAPSHOT_T
--------------------------------------------------------

CREATE OR REPLACE TYPE SHARE_CLASS_SNAPSHOT_T AS OBJECT 
(
    SHARE_CLASS_SNAPSHOT_SID INTEGER,
    REPORTING_DT DATE,
    SHARE_CLASS_SID INTEGER,
    CALENDAR_DT     DATE,
    MM_1_DAY_MIL_RT NUMBER(38, 3),
    DER_MM_RESTATED_MIL_RT NUMBER(38, 3),
    DIST_YIELD_MIL_RT NUMBER(38, 9),
    FDR_SEC_EXPENSE_AMT NUMBER(38, 2),
    MM_1_DAY_YIELD_PCT NUMBER(38, 3),
    DER_MM_7_DAY_YIELD_PCT NUMBER(38, 3),
    DER_MM_30_DAY_YIELD_PCT NUMBER(38, 3),
    DER_MM_COMPOUND_7D_YIELD_PCT NUMBER(38, 3),
    DER_MM_1_DAY_N1A_YIELD_PCT NUMBER(38, 3),
    DER_MM_7_DAY_N1A_YIELD_PCT NUMBER(38, 3),
    DER_MM_N1A_30_DAY_YIELD_PCT NUMBER(38, 3),
    N1A_DIST_REIMBURSEMENT_AMT NUMBER(38, 2),
    DER_MM_RST_7_DAY_YIELD_PCT NUMBER(38, 3),
    DER_MM_RST_30_DAY_YIELD_PCT NUMBER(38, 3),
    DER_N1A_DIST_INCOME_AMT NUMBER(38, 2),
    DER_N1A_DAILY_MIL_RT NUMBER(38,2),
    N1A_DIST_INCOME_UNMOD_AMT NUMBER(38, 2),
    N1A_DIST_INCOME_ADJ_AMT NUMBER(38, 2),
    N1A_DIST_INCOME_BREAKAGE_AMT NUMBER(38, 2),
    N1A_DIST_INCOME_ADJ_REV_AMT NUMBER(38, 2),
    DIST_1_DAY_YIELD_PCT NUMBER(38, 3),
    DIST_30_DAY_YIELD_PCT NUMBER(38,3),
    NAV_AMT NUMBER(38, 9),
    DER_SEC_1_DAY_YIELD_PCT NUMBER(38, 3),
    DER_SEC_30_DAY_YIELD_PCT NUMBER(38, 3),
    DER_SEC_RESTATED_YIELD_PCT NUMBER(38, 3),
    DISTRIBUTABLE_CAPSTOCK_QTY NUMBER(38, 9),
    N1A_GROSS_INCOME_UNMOD_AMT NUMBER(38, 2),
    N1A_REIMBURSEMENT_EARNED_AMT NUMBER(38, 2),
    N1A_WAIVER_EARNED_AMT NUMBER(38, 2),
    FDR_N1A_TAX_AMT NUMBER(38, 2),
    FDR_N1A_GROSS_DIST_INCOME_AMT NUMBER(38, 2),
    ADJ_EXCL_SHARE_CLASS_CALC_IND VARCHAR2(1 BYTE),
    DER_N1A_DAILY_YIELD_PCT NUMBER(38, 3),
    DER_SEC_YIELD_PME_CHG_PCT NUMBER(38, 3),
    DER_MM_1D_DIST_YLD_DOD_CHG_PCT NUMBER(38, 3),
    DER_MM_7D_DIST_YLD_DOD_CHG_PCT NUMBER(38, 3),
    DER_MM_1D_N1A_YLD_DOD_CHG_PCT NUMBER(38, 3),
    DER_MM_7D_N1A_YLD_DOD_CHG_PCT NUMBER(38, 3),
    DER_DIST_12_MO_YIELD_PCT NUMBER(38, 3),
    DER_DIST_30_DAY_YIELD_PCT NUMBER(38, 3),
    DER_MM_RESTATE_1_DAY_YIELD_PCT NUMBER(38, 3),
    DER_MM_N1A_COMPOUND_7DAY_YIELD NUMBER(38, 3),
    SEC_REIMBURSEMENT_EARNED_AMT NUMBER(38, 2),
    DIST_UNMOD_30_DAY_YIELD_PCT NUMBER(38, 3),
    ADJ_TO_MIL_RT NUMBER(38, 9),
    ADJ_DIST_MIL_SPIKE_RT NUMBER(38, 9),
    ADJ_DIST_MIL_SPIKE_DT DATE,
    DIST_12_MO_MIL_RT NUMBER(38, 9),
    FDR_SEC_PORT_CLASS_EXP_TOT_AMT NUMBER(38, 9),
    CREATE_ID VARCHAR2(30 BYTE),
    CREATE_TS TIMESTAMP(6),
    UPDATE_ID VARCHAR2(30 BYTE),
    UPDATE_TS TIMESTAMP(6)
);
/
--------------------------------------------------------
--  DDL for Type TRADABLE_ENTITY_SNAPSHOT_T
--------------------------------------------------------

CREATE OR REPLACE TYPE TRADABLE_ENTITY_SNAPSHOT_T AS OBJECT 
(
    TRADABLE_ENTITY_SNAPSHOT_SID INTEGER,
    REPORTING_DT DATE,
    TRADABLE_ENTITY_SID INTEGER,
    DER_YIELD_CALC_ENGINE_CD VARCHAR2(20 BYTE),
    DER_INCOME_CALC_ENGINE_CD VARCHAR2(20 BYTE),
    DER_REDEMPTION_PRC NUMBER(38, 9),
    DER_REDEMPTION_DT DATE,
    FDR_REVISED_ISSUE_PRC NUMBER(38, 9),
    CURRENT_FCTR NUMBER(38, 9),
    WAL_YEAR_VAL NUMBER(38, 9),
    MARKET_PRC NUMBER(38, 9),
    CURRENT_INCOME_RT NUMBER(38, 9),
    CURRENT_COUPON_ELECTION_CD VARCHAR2(12 BYTE),
    RETURN_ON_CAPITAL_RT NUMBER(38, 3),
    FDR_TIPS_INFLATIONARY_RATIO_RT NUMBER(38, 3),
    FDR_CLEAN_PRC NUMBER(38, 9),
    FDR_ANNUALIZED_DIVIDEND_RT NUMBER(38, 3),
    N1A_OOSP_DIST_INCOME_AMT NUMBER(38, 2),
    N1A_OOSP_DIST_AMORT_AMT NUMBER(38, 2),
    FDR_TRUE_CURRENT_FCTR NUMBER(38, 9),
    FDR_PRV_TRUE_CURRENT_FCTR NUMBER(38, 9),
    FDR_PAYDOWN_IND VARCHAR2(1 BYTE),
    FDR_CONVER_PARITY_PRC NUMBER(38, 9),
    DER_SEC_1_DAY_YIELD_RT NUMBER(38, 3),
    ADJ_DER_SEC_1_DAY_YIELD_RT NUMBER(38, 3),
    DER_SEC_YLD_DOD_CHG_PCT NUMBER(38, 3),
    DER_SEC_YLD_INC_DOD_CHG_PCT NUMBER(38, 3),
    ADJ_REDEMPTION_PRC NUMBER(38, 9),
    ADJ_MARKET_PRC NUMBER(38, 9),
    LAST_ADJ_USER_ID VARCHAR2(30 BYTE),
    LAST_ADJ_TS TIMESTAMP(6),
    LAST_ADJ_APPROVAL_STATUS_CD VARCHAR2(20 BYTE),
    LAST_ADJ_APPROVER_USER_ID VARCHAR2(30 BYTE),
    LAST_ADJ_APPROVAL_TS TIMESTAMP(6),
    FDR_WAL_MATURITY_DT DATE,
    CREATE_ID VARCHAR2(30 BYTE),
    CREATE_TS TIMESTAMP(6),
    UPDATE_ID VARCHAR2(30 BYTE),
    UPDATE_TS TIMESTAMP(6)
);
/
--------------------------------------------------------
--  DDL for Sequence CALL_SCHEDULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  CALL_SCHEDULE_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence GENERAL_LEGDER_ACCOUNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  GENERAL_LEGDER_ACCOUNT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence INSTRUMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  INSTRUMENT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence INTEREST_RATE_SCHEDULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  INTEREST_RATE_SCHEDULE_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PORTFOLIO_GL_BAL_SNAPSHOT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PORTFOLIO_GL_BAL_SNAPSHOT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PORTFOLIO_HOLDING_SNAPSHOT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PORTFOLIO_HOLDING_SNAPSHOT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PORTFOLIO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PORTFOLIO_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PORTFOLIO_SNAPSHOT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PORTFOLIO_SNAPSHOT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PORTFOLIO_TAX_EXCLUSION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PORTFOLIO_TAX_EXCLUSION_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PROCESSING_EVENT_LOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PROCESSING_EVENT_LOG_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PROCESSING_REQUEST_LOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PROCESSING_REQUEST_LOG_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence PUT_SCHEDULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  PUT_SCHEDULE_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence SHARE_CLASS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  SHARE_CLASS_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence SHARE_CLASS_SNAPSHOT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  SHARE_CLASS_SNAPSHOT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence TOLERANCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  TOLERANCE_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence TRADABLE_ENTITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  TRADABLE_ENTITY_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence TRADABLE_ENTITY_SNAPSHOT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  TRADABLE_ENTITY_SNAPSHOT_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence UNDERLYING_INSTRUMENT_LINK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  UNDERLYING_INSTRUMENT_LINK_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Sequence WARNING_LOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  WARNING_LOG_SEQ  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE;
--------------------------------------------------------
--  DDL for Procedure GET_INSTRUMENT_DATA
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE GET_INSTRUMENT_DATA 
(
  BUSINESS_DATE_START IN DATE,
  BUSINESS_DATE_END IN DATE,
  INSTRUMENT_CUR OUT SYS_REFCURSOR,
  UNDERLYING_INSTRUMENT_CUR OUT SYS_REFCURSOR,
  INTEREST_RATE_SCHEDULE_CUR OUT SYS_REFCURSOR,
  CASH_DIVIDEND_SCHEDULE_CUR OUT SYS_REFCURSOR,
  CALL_SCHEDULE_CUR OUT SYS_REFCURSOR,
  PUT_SCHEDULE_CUR OUT SYS_REFCURSOR,
  UNDERLYING_INSTRUMENT_LINK_CUR OUT SYS_REFCURSOR,
  TRADABLE_ENTITY_CUR OUT SYS_REFCURSOR,
  TRADABLE_ENTITY_SNAPSHOT_CUR OUT SYS_REFCURSOR
) AS

  INSTRUMENT_SIDS INSTRUMENT_SIDS_TABLE := INSTRUMENT_SIDS_TABLE();

BEGIN

  /** Populate instrument ids **/
  SELECT INSTRUMENT_SIDS_RECORD(
      TRADABLE_ENTITY.INSTRUMENT_SID,
      TRADABLE_ENTITY.TRADABLE_ENTITY_SID)
    BULK COLLECT INTO INSTRUMENT_SIDS
    FROM TRADABLE_ENTITY INNER JOIN TRADABLE_ENTITY_SNAPSHOT
    ON TRADABLE_ENTITY.TRADABLE_ENTITY_SID = TRADABLE_ENTITY_SNAPSHOT.TRADABLE_ENTITY_SID
    AND TRADABLE_ENTITY_SNAPSHOT.REPORTING_DT >= BUSINESS_DATE_START AND TRADABLE_ENTITY_SNAPSHOT.REPORTING_DT < BUSINESS_DATE_END;

  /** Open cursor for instrument related tables **/
  OPEN INSTRUMENT_CUR FOR
    SELECT INSTRUMENT.* FROM INSTRUMENT
    WHERE INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN INTEREST_RATE_SCHEDULE_CUR FOR
    SELECT INTEREST_RATE_SCHEDULE.* FROM INTEREST_RATE_SCHEDULE
    WHERE INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN CASH_DIVIDEND_SCHEDULE_CUR FOR
    SELECT CASH_DIVIDEND_SCHEDULE.* FROM CASH_DIVIDEND_SCHEDULE
    WHERE INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN CALL_SCHEDULE_CUR FOR
    SELECT CALL_SCHEDULE.* FROM CALL_SCHEDULE
    WHERE INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN PUT_SCHEDULE_CUR FOR
    SELECT PUT_SCHEDULE.* FROM PUT_SCHEDULE
    WHERE INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN UNDERLYING_INSTRUMENT_LINK_CUR FOR
    SELECT UNDERLYING_INSTRUMENT_LINK.* FROM UNDERLYING_INSTRUMENT_LINK
    WHERE OVERLAYING_INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN TRADABLE_ENTITY_CUR FOR
    SELECT TRADABLE_ENTITY.* FROM TRADABLE_ENTITY
    WHERE TRADABLE_ENTITY_SID IN (SELECT DISTINCT TRADABLE_ENTITY_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN TRADABLE_ENTITY_SNAPSHOT_CUR FOR
    SELECT TRADABLE_ENTITY_SNAPSHOT.* FROM TRADABLE_ENTITY_SNAPSHOT
    WHERE TRADABLE_ENTITY_SID IN (SELECT DISTINCT TRADABLE_ENTITY_SID FROM TABLE(INSTRUMENT_SIDS));

  OPEN UNDERLYING_INSTRUMENT_CUR FOR
    SELECT INSTRUMENT.* FROM INSTRUMENT
    WHERE INSTRUMENT_SID IN (
      SELECT UNDERLYING_INSTRUMENT_SID
      FROM UNDERLYING_INSTRUMENT_LINK
      WHERE OVERLAYING_INSTRUMENT_SID IN (SELECT DISTINCT INSTRUMENT_SID FROM TABLE(INSTRUMENT_SIDS)));

END GET_INSTRUMENT_DATA;
/

--------------------------------------------------------
--  DDL for Procedure GET_PORTFOLIO_DATA
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE GET_PORTFOLIO_DATA 
(
  BUSINESS_DATE_START IN DATE,
  BUSINESS_DATE_END IN DATE,
  PORTFOLIO_CUR OUT SYS_REFCURSOR,
  TAX_EXCLUSION_CUR OUT SYS_REFCURSOR,
  PORTFOLIO_SNAPSHOT_CUR OUT SYS_REFCURSOR,
  PORTFOLIO_HOLDING_SNAPSHOT_CUR OUT SYS_REFCURSOR,
  SHARE_CLASS_CUR OUT SYS_REFCURSOR,
  SHARE_CLASS_SNAPSHOT_CUR OUT SYS_REFCURSOR,
  TRADABLE_ENTITY_CUR OUT SYS_REFCURSOR,
  TRADABLE_ENTITY_SNAPSHOT_CUR OUT SYS_REFCURSOR
) AS

  PORTFOLIO_SIDS PORTFOLIO_SIDS_TABLE := PORTFOLIO_SIDS_TABLE();
BEGIN

  /** Populate portfolio ids **/
  SELECT PORTFOLIO_SIDS_RECORD(c1, c2, c3)
    BULK COLLECT INTO PORTFOLIO_SIDS
    FROM
    (
      SELECT PORTFOLIO_SNAPSHOT.PORTFOLIO_SID as c1, null as c2, null as c3
      FROM PORTFOLIO_SNAPSHOT
      WHERE PORTFOLIO_SNAPSHOT.REPORTING_DT >= BUSINESS_DATE_START AND PORTFOLIO_SNAPSHOT.REPORTING_DT < BUSINESS_DATE_END
      UNION ALL
      SELECT PORTFOLIO_HOLDING_SNAPSHOT.PORTFOLIO_SID as c1, null as c2, PORTFOLIO_HOLDING_SNAPSHOT.TRADABLE_ENTITY_SID as c3
      FROM PORTFOLIO_HOLDING_SNAPSHOT
      WHERE PORTFOLIO_HOLDING_SNAPSHOT.REPORTING_DT >= BUSINESS_DATE_START AND PORTFOLIO_HOLDING_SNAPSHOT.REPORTING_DT < BUSINESS_DATE_END
      UNION ALL
      SELECT SHARE_CLASS.PORTFOLIO_SID as c1, SHARE_CLASS.SHARE_CLASS_SID as c2, null as c3
      FROM SHARE_CLASS INNER JOIN SHARE_CLASS_SNAPSHOT
      ON SHARE_CLASS.SHARE_CLASS_SID = SHARE_CLASS_SNAPSHOT.SHARE_CLASS_SID
      AND SHARE_CLASS_SNAPSHOT.REPORTING_DT >= BUSINESS_DATE_START AND SHARE_CLASS_SNAPSHOT.REPORTING_DT < BUSINESS_DATE_END
    );

  /** Open cursor for portfolio related tables **/
  OPEN PORTFOLIO_CUR FOR
    SELECT PORTFOLIO.* FROM PORTFOLIO
    WHERE PORTFOLIO_SID IN (SELECT DISTINCT PORTFOLIO_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN TAX_EXCLUSION_CUR FOR
    SELECT PORTFOLIO_TAX_EXCLUSION.* FROM PORTFOLIO_TAX_EXCLUSION
    WHERE PORTFOLIO_SID IN (SELECT DISTINCT PORTFOLIO_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN PORTFOLIO_SNAPSHOT_CUR FOR
    SELECT PORTFOLIO_SNAPSHOT.* FROM PORTFOLIO_SNAPSHOT
    WHERE PORTFOLIO_SID IN (SELECT DISTINCT PORTFOLIO_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN PORTFOLIO_HOLDING_SNAPSHOT_CUR FOR
    SELECT PORTFOLIO_HOLDING_SNAPSHOT.* FROM PORTFOLIO_HOLDING_SNAPSHOT
    WHERE PORTFOLIO_SID IN (SELECT DISTINCT PORTFOLIO_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN SHARE_CLASS_CUR FOR
    SELECT SHARE_CLASS.* FROM SHARE_CLASS
    WHERE SHARE_CLASS_SID IN (SELECT DISTINCT SHARE_CLASS_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN SHARE_CLASS_SNAPSHOT_CUR FOR
    SELECT SHARE_CLASS_SNAPSHOT.* FROM SHARE_CLASS_SNAPSHOT
    WHERE SHARE_CLASS_SID IN (SELECT DISTINCT SHARE_CLASS_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN TRADABLE_ENTITY_CUR FOR
    SELECT TRADABLE_ENTITY.* FROM TRADABLE_ENTITY
    WHERE TRADABLE_ENTITY_SID IN (SELECT DISTINCT TRADABLE_ENTITY_SID FROM TABLE(PORTFOLIO_SIDS));

  OPEN TRADABLE_ENTITY_SNAPSHOT_CUR FOR
    SELECT TRADABLE_ENTITY_SNAPSHOT.* FROM TRADABLE_ENTITY_SNAPSHOT
    WHERE TRADABLE_ENTITY_SID IN (SELECT DISTINCT TRADABLE_ENTITY_SID FROM TABLE(PORTFOLIO_SIDS))
    AND TRADABLE_ENTITY_SNAPSHOT.REPORTING_DT >= BUSINESS_DATE_START AND TRADABLE_ENTITY_SNAPSHOT.REPORTING_DT < BUSINESS_DATE_END;

END GET_PORTFOLIO_DATA;
/

--------------------------------------------------------
--  DDL for Procedure SAVE_PORTFOLIO_HOLDING
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE SAVE_PORTFOLIO_HOLDING 
(
    entity IN PORTFOLIO_HOLDING_T,
    updateCalcResult IN SMALLINT,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
BEGIN
    SELECT MIN(PORTFOLIO_HOLDING_SNAPSHOT_SID) INTO vSid FROM PORTFOLIO_HOLDING_SNAPSHOT
    WHERE REPORTING_DT = entity.REPORTING_DT 
      AND PORTFOLIO_SID = entity.PORTFOLIO_SID
      AND TRADABLE_ENTITY_SID = entity.TRADABLE_ENTITY_SID
      AND HOLDING_BUSINESS_GROUP_VIEW_CD = entity.HOLDING_BUSINESS_GROUP_VIEW_CD
      AND HOLDING_VIEW_CD = entity.HOLDING_VIEW_CD
      AND POSITION_CD = entity.POSITION_CD;

    IF vSid IS NULL THEN
      /** Not exist, insert **/
      vSid := PORTFOLIO_HOLDING_SNAPSHOT_SEQ.NEXTVAL;
      INSERT INTO PORTFOLIO_HOLDING_SNAPSHOT (PORTFOLIO_HOLDING_SNAPSHOT_SID,PORTFOLIO_SID,REPORTING_DT,TRADABLE_ENTITY_SID,HOLDING_BUSINESS_GROUP_VIEW_CD,HOLDING_VIEW_CD,POSITION_CD,TRADABLE_ENTITY_ID,ACCRUED_INCOME_AMT,EARNED_AMORT_BASE_AMT,EARNED_INFL_CMPS_BASE_AMT,MARKET_VALUE_BASE_AMT,INFLATION_ADJ_SHARE_CNT,SETTLE_SHARE_CNT,ORIGINAL_FACE_SHARE_QTY,FX_RT,DER_SEC_YIELD_1_DAY_INCOME_AMT,ADJ_DER_SEC_YIELD_1DAY_INC_AMT,ADJ_DER_MARKET_VALUE_BASE_AMT,ADJ_SETTLE_SHARE_CNT,ADJ_ACCRUED_INCOME_AMT,ADJ_EARNED_AMORT_BASE_AMT,ADJ_EARNED_INFL_CMPS_BASE_AMT,ADJ_COMMENTS_TXT,LAST_ADJ_USER_ID,LAST_ADJ_TS,LAST_ADJ_APPROVAL_STATUS_CD,LAST_ADJ_APPROVER_USER_ID,LAST_ADJ_APPROVAL_TS,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.PORTFOLIO_SID,entity.REPORTING_DT,entity.TRADABLE_ENTITY_SID,entity.HOLDING_BUSINESS_GROUP_VIEW_CD,entity.HOLDING_VIEW_CD,entity.POSITION_CD,entity.TRADABLE_ENTITY_ID,entity.ACCRUED_INCOME_AMT,entity.EARNED_AMORT_BASE_AMT,entity.EARNED_INFL_CMPS_BASE_AMT,entity.MARKET_VALUE_BASE_AMT,entity.INFLATION_ADJ_SHARE_CNT,entity.SETTLE_SHARE_CNT,entity.ORIGINAL_FACE_SHARE_QTY,entity.FX_RT,entity.DER_SEC_YIELD_1_DAY_INCOME_AMT,entity.ADJ_DER_SEC_YIELD_1DAY_INC_AMT,entity.ADJ_DER_MARKET_VALUE_BASE_AMT,entity.ADJ_SETTLE_SHARE_CNT,entity.ADJ_ACCRUED_INCOME_AMT,entity.ADJ_EARNED_AMORT_BASE_AMT,entity.ADJ_EARNED_INFL_CMPS_BASE_AMT,entity.ADJ_COMMENTS_TXT,entity.LAST_ADJ_USER_ID,entity.LAST_ADJ_TS,entity.LAST_ADJ_APPROVAL_STATUS_CD,entity.LAST_ADJ_APPROVER_USER_ID,entity.LAST_ADJ_APPROVAL_TS,entity.CREATE_ID,CURRENT_DATE);
    ELSE
      /** Update **/
      IF updateCalcResult = 1 THEN
        UPDATE PORTFOLIO_HOLDING_SNAPSHOT SET PORTFOLIO_SID = entity.PORTFOLIO_SID,REPORTING_DT = entity.REPORTING_DT,TRADABLE_ENTITY_SID = entity.TRADABLE_ENTITY_SID,HOLDING_BUSINESS_GROUP_VIEW_CD = entity.HOLDING_BUSINESS_GROUP_VIEW_CD,HOLDING_VIEW_CD = entity.HOLDING_VIEW_CD,POSITION_CD = entity.POSITION_CD,TRADABLE_ENTITY_ID = entity.TRADABLE_ENTITY_ID,ACCRUED_INCOME_AMT = entity.ACCRUED_INCOME_AMT,EARNED_AMORT_BASE_AMT = entity.EARNED_AMORT_BASE_AMT,EARNED_INFL_CMPS_BASE_AMT = entity.EARNED_INFL_CMPS_BASE_AMT,MARKET_VALUE_BASE_AMT = entity.MARKET_VALUE_BASE_AMT,INFLATION_ADJ_SHARE_CNT = entity.INFLATION_ADJ_SHARE_CNT,SETTLE_SHARE_CNT = entity.SETTLE_SHARE_CNT,ORIGINAL_FACE_SHARE_QTY = entity.ORIGINAL_FACE_SHARE_QTY,FX_RT = entity.FX_RT,DER_SEC_YIELD_1_DAY_INCOME_AMT = entity.DER_SEC_YIELD_1_DAY_INCOME_AMT,ADJ_DER_SEC_YIELD_1DAY_INC_AMT = entity.ADJ_DER_SEC_YIELD_1DAY_INC_AMT,ADJ_DER_MARKET_VALUE_BASE_AMT = entity.ADJ_DER_MARKET_VALUE_BASE_AMT,ADJ_SETTLE_SHARE_CNT = entity.ADJ_SETTLE_SHARE_CNT,ADJ_ACCRUED_INCOME_AMT = entity.ADJ_ACCRUED_INCOME_AMT,ADJ_EARNED_AMORT_BASE_AMT = entity.ADJ_EARNED_AMORT_BASE_AMT,ADJ_EARNED_INFL_CMPS_BASE_AMT = entity.ADJ_EARNED_INFL_CMPS_BASE_AMT,ADJ_COMMENTS_TXT = entity.ADJ_COMMENTS_TXT,LAST_ADJ_USER_ID = entity.LAST_ADJ_USER_ID,LAST_ADJ_TS = entity.LAST_ADJ_TS,LAST_ADJ_APPROVAL_STATUS_CD = entity.LAST_ADJ_APPROVAL_STATUS_CD,LAST_ADJ_APPROVER_USER_ID = entity.LAST_ADJ_APPROVER_USER_ID,LAST_ADJ_APPROVAL_TS = entity.LAST_ADJ_APPROVAL_TS,UPDATE_ID = entity.CREATE_ID,UPDATE_TS = CURRENT_DATE
        WHERE PORTFOLIO_HOLDING_SNAPSHOT_SID = vSid;
      ELSE
        /** Do not update calculation result columns **/
        UPDATE PORTFOLIO_HOLDING_SNAPSHOT SET PORTFOLIO_SID = entity.PORTFOLIO_SID,REPORTING_DT = entity.REPORTING_DT,TRADABLE_ENTITY_SID = entity.TRADABLE_ENTITY_SID,HOLDING_BUSINESS_GROUP_VIEW_CD = entity.HOLDING_BUSINESS_GROUP_VIEW_CD,HOLDING_VIEW_CD = entity.HOLDING_VIEW_CD,POSITION_CD = entity.POSITION_CD,TRADABLE_ENTITY_ID = entity.TRADABLE_ENTITY_ID,ACCRUED_INCOME_AMT = entity.ACCRUED_INCOME_AMT,EARNED_AMORT_BASE_AMT = entity.EARNED_AMORT_BASE_AMT,EARNED_INFL_CMPS_BASE_AMT = entity.EARNED_INFL_CMPS_BASE_AMT,MARKET_VALUE_BASE_AMT = entity.MARKET_VALUE_BASE_AMT,INFLATION_ADJ_SHARE_CNT = entity.INFLATION_ADJ_SHARE_CNT,SETTLE_SHARE_CNT = entity.SETTLE_SHARE_CNT,ORIGINAL_FACE_SHARE_QTY = entity.ORIGINAL_FACE_SHARE_QTY,FX_RT = entity.FX_RT,ADJ_DER_SEC_YIELD_1DAY_INC_AMT = entity.ADJ_DER_SEC_YIELD_1DAY_INC_AMT,ADJ_DER_MARKET_VALUE_BASE_AMT = entity.ADJ_DER_MARKET_VALUE_BASE_AMT,ADJ_SETTLE_SHARE_CNT = entity.ADJ_SETTLE_SHARE_CNT,ADJ_ACCRUED_INCOME_AMT = entity.ADJ_ACCRUED_INCOME_AMT,ADJ_EARNED_AMORT_BASE_AMT = entity.ADJ_EARNED_AMORT_BASE_AMT,ADJ_EARNED_INFL_CMPS_BASE_AMT = entity.ADJ_EARNED_INFL_CMPS_BASE_AMT,ADJ_COMMENTS_TXT = entity.ADJ_COMMENTS_TXT,LAST_ADJ_USER_ID = entity.LAST_ADJ_USER_ID,LAST_ADJ_TS = entity.LAST_ADJ_TS,LAST_ADJ_APPROVAL_STATUS_CD = entity.LAST_ADJ_APPROVAL_STATUS_CD,LAST_ADJ_APPROVER_USER_ID = entity.LAST_ADJ_APPROVER_USER_ID,LAST_ADJ_APPROVAL_TS = entity.LAST_ADJ_APPROVAL_TS,UPDATE_ID = entity.CREATE_ID,UPDATE_TS = CURRENT_DATE
        WHERE PORTFOLIO_HOLDING_SNAPSHOT_SID = vSid;
      END IF;
    END IF;

    oSid := vSid;
END SAVE_PORTFOLIO_HOLDING;
/
--------------------------------------------------------
--  DDL for Procedure SAVE_PORTFOLIO_SNAPSHOT
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE SAVE_PORTFOLIO_SNAPSHOT 
(
    entity IN PORTFOLIO_SNAPSHOT_T,
    updateCalcResult IN SMALLINT,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
BEGIN
    SELECT MIN(PORTFOLIO_SNAPSHOT_SID) INTO vSid FROM PORTFOLIO_SNAPSHOT
    WHERE REPORTING_DT = entity.REPORTING_DT 
      AND PORTFOLIO_SID = entity.PORTFOLIO_SID;

    IF vSid IS NULL THEN
      /** Not exist, insert **/
      vSid := PORTFOLIO_SNAPSHOT_SEQ.NEXTVAL;
      INSERT INTO PORTFOLIO_SNAPSHOT (PORTFOLIO_SNAPSHOT_SID,PORTFOLIO_SID,REPORTING_DT,DER_PORTFOLIO_TIER_NBR,FDR_SEC_EXPENSE_AMT,FDR_SEC_TOTAL_INCOME_AMT,DER_SEC_1_DAY_YIELD_PCT,DER_SEC_30_DAY_YIELD_PCT,DER_SEC_RESTATED_YIELD_PCT,FDR_SEC_MIL_ADJ_PCT,FDR_N1A_TOT_GROS_INC_UNMOD_AMT,FDR_N1A_OOSP_DIST_INCOME_AMT,FDR_N1A_OOSP_DIST_AMORT_AMT,FDR_N1A_NET_OOSP_DIST_INC_AMT,FDR_N1A_OOSP_GROS_DIST_INC_PCT,FDR_PORTFOLIO_STATE_TAX_RT,ADJ_DER_SEC_1_DAY_YIELD_PCT,ADJ_DER_SEC_30_DAY_YIELD_PCT,DER_SEC_YIELD_PME_CHG_PCT,DER_RST_SEC_YIELD_PME_CHG_PCT,DER_MM_7_DAY_YLD_PME_CHG_PCT,DER_MM_30_DAY_YLD_PME_CHG_PCT,DER_MM_GROSS_YIELD_DOD_CHG_PCT,DER_MM_RST_7D_YLD_DOD_CHG_PCT,DER_DIST_1D_YLD_C2C_CMPR_PCT,DER_DIST_30D_YLD_C2C_CMPR_PCT,DER_DIST_1_DAY_YLD_PME_CHG_PCT,DER_DIST_30D_YLD_CHG_PME_PCT,DER_DIST_12MO_YLD_CHG_PME_PCT,MM_1DAY_GROSS_YIELD_PCT,MM_1DAY_DIST_YIELD_PCT,MM_N1A_STATE_TAX_RT,FDR_DISTRIBUTABLE_CAPSTOCK_QTY,DER_SEC_1_DAY_MIL_RT,DER_SEC_30_DAY_MIL_RT,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.PORTFOLIO_SID,entity.REPORTING_DT,entity.DER_PORTFOLIO_TIER_NBR,entity.FDR_SEC_EXPENSE_AMT,entity.FDR_SEC_TOTAL_INCOME_AMT,entity.DER_SEC_1_DAY_YIELD_PCT,entity.DER_SEC_30_DAY_YIELD_PCT,entity.DER_SEC_RESTATED_YIELD_PCT,entity.FDR_SEC_MIL_ADJ_PCT,entity.FDR_N1A_TOT_GROS_INC_UNMOD_AMT,entity.FDR_N1A_OOSP_DIST_INCOME_AMT,entity.FDR_N1A_OOSP_DIST_AMORT_AMT,entity.FDR_N1A_NET_OOSP_DIST_INC_AMT,entity.FDR_N1A_OOSP_GROS_DIST_INC_PCT,entity.FDR_PORTFOLIO_STATE_TAX_RT,entity.ADJ_DER_SEC_1_DAY_YIELD_PCT,entity.ADJ_DER_SEC_30_DAY_YIELD_PCT,entity.DER_SEC_YIELD_PME_CHG_PCT,entity.DER_RST_SEC_YIELD_PME_CHG_PCT,entity.DER_MM_7_DAY_YLD_PME_CHG_PCT,entity.DER_MM_30_DAY_YLD_PME_CHG_PCT,entity.DER_MM_GROSS_YIELD_DOD_CHG_PCT,entity.DER_MM_RST_7D_YLD_DOD_CHG_PCT,entity.DER_DIST_1D_YLD_C2C_CMPR_PCT,entity.DER_DIST_30D_YLD_C2C_CMPR_PCT,entity.DER_DIST_1_DAY_YLD_PME_CHG_PCT,entity.DER_DIST_30D_YLD_CHG_PME_PCT,entity.DER_DIST_12MO_YLD_CHG_PME_PCT,entity.MM_1DAY_GROSS_YIELD_PCT,entity.MM_1DAY_DIST_YIELD_PCT,entity.MM_N1A_STATE_TAX_RT,entity.FDR_DISTRIBUTABLE_CAPSTOCK_QTY,entity.DER_SEC_1_DAY_MIL_RT,entity.DER_SEC_30_DAY_MIL_RT,entity.CREATE_ID,CURRENT_DATE);
    ELSE
      /** Update **/
      UPDATE PORTFOLIO_SNAPSHOT SET PORTFOLIO_SID = entity.PORTFOLIO_SID, REPORTING_DT = entity.REPORTING_DT,DER_PORTFOLIO_TIER_NBR = entity.DER_PORTFOLIO_TIER_NBR,FDR_SEC_EXPENSE_AMT = entity.FDR_SEC_EXPENSE_AMT,FDR_SEC_TOTAL_INCOME_AMT = entity.FDR_SEC_TOTAL_INCOME_AMT,DER_SEC_1_DAY_YIELD_PCT = entity.DER_SEC_1_DAY_YIELD_PCT,DER_SEC_30_DAY_YIELD_PCT = entity.DER_SEC_30_DAY_YIELD_PCT,DER_SEC_RESTATED_YIELD_PCT = entity.DER_SEC_RESTATED_YIELD_PCT,FDR_SEC_MIL_ADJ_PCT = entity.FDR_SEC_MIL_ADJ_PCT,FDR_N1A_TOT_GROS_INC_UNMOD_AMT = entity.FDR_N1A_TOT_GROS_INC_UNMOD_AMT,FDR_N1A_OOSP_DIST_INCOME_AMT = entity.FDR_N1A_OOSP_DIST_INCOME_AMT,FDR_N1A_OOSP_DIST_AMORT_AMT = entity.FDR_N1A_OOSP_DIST_AMORT_AMT,FDR_N1A_NET_OOSP_DIST_INC_AMT = entity.FDR_N1A_NET_OOSP_DIST_INC_AMT,FDR_N1A_OOSP_GROS_DIST_INC_PCT = entity.FDR_N1A_OOSP_GROS_DIST_INC_PCT,FDR_PORTFOLIO_STATE_TAX_RT = entity.FDR_PORTFOLIO_STATE_TAX_RT,ADJ_DER_SEC_1_DAY_YIELD_PCT = entity.ADJ_DER_SEC_1_DAY_YIELD_PCT,ADJ_DER_SEC_30_DAY_YIELD_PCT = entity.ADJ_DER_SEC_30_DAY_YIELD_PCT,DER_SEC_YIELD_PME_CHG_PCT = entity.DER_SEC_YIELD_PME_CHG_PCT,DER_RST_SEC_YIELD_PME_CHG_PCT = entity.DER_RST_SEC_YIELD_PME_CHG_PCT,DER_MM_7_DAY_YLD_PME_CHG_PCT = entity.DER_MM_7_DAY_YLD_PME_CHG_PCT,DER_MM_30_DAY_YLD_PME_CHG_PCT = entity.DER_MM_30_DAY_YLD_PME_CHG_PCT,DER_MM_GROSS_YIELD_DOD_CHG_PCT = entity.DER_MM_GROSS_YIELD_DOD_CHG_PCT,DER_MM_RST_7D_YLD_DOD_CHG_PCT = entity.DER_MM_RST_7D_YLD_DOD_CHG_PCT,DER_DIST_1D_YLD_C2C_CMPR_PCT = entity.DER_DIST_1D_YLD_C2C_CMPR_PCT,DER_DIST_30D_YLD_C2C_CMPR_PCT = entity.DER_DIST_30D_YLD_C2C_CMPR_PCT,DER_DIST_1_DAY_YLD_PME_CHG_PCT = entity.DER_DIST_1_DAY_YLD_PME_CHG_PCT,DER_DIST_30D_YLD_CHG_PME_PCT = entity.DER_DIST_30D_YLD_CHG_PME_PCT,DER_DIST_12MO_YLD_CHG_PME_PCT = entity.DER_DIST_12MO_YLD_CHG_PME_PCT,MM_1DAY_GROSS_YIELD_PCT = entity.MM_1DAY_GROSS_YIELD_PCT,MM_1DAY_DIST_YIELD_PCT = entity.MM_1DAY_DIST_YIELD_PCT,MM_N1A_STATE_TAX_RT = entity.MM_N1A_STATE_TAX_RT,FDR_DISTRIBUTABLE_CAPSTOCK_QTY = entity.FDR_DISTRIBUTABLE_CAPSTOCK_QTY,DER_SEC_1_DAY_MIL_RT = entity.DER_SEC_1_DAY_MIL_RT,DER_SEC_30_DAY_MIL_RT = entity.DER_SEC_30_DAY_MIL_RT,UPDATE_ID = entity.CREATE_ID,UPDATE_TS = CURRENT_DATE
      WHERE PORTFOLIO_SNAPSHOT_SID = vSid;
    END IF;

    oSid := vSid;
END SAVE_PORTFOLIO_SNAPSHOT;
/
--------------------------------------------------------
--  DDL for Procedure SAVE_SHARE_CLASS_SNAPSHOT
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE SAVE_SHARE_CLASS_SNAPSHOT 
(
    entity IN SHARE_CLASS_SNAPSHOT_T,
    updateCalcResult IN SMALLINT,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
BEGIN
    SELECT MIN(SHARE_CLASS_SNAPSHOT_SID) INTO vSid FROM SHARE_CLASS_SNAPSHOT
    WHERE REPORTING_DT = entity.REPORTING_DT 
      AND SHARE_CLASS_SID = entity.SHARE_CLASS_SID;

    IF vSid IS NULL THEN
      /** Not exist, insert **/
      vSid := SHARE_CLASS_SNAPSHOT_SEQ.NEXTVAL;
      INSERT INTO SHARE_CLASS_SNAPSHOT (SHARE_CLASS_SNAPSHOT_SID,SHARE_CLASS_SID,REPORTING_DT,CALENDAR_DT,MM_1_DAY_MIL_RT,DER_MM_RESTATED_MIL_RT,DIST_YIELD_MIL_RT,FDR_SEC_EXPENSE_AMT,FDR_SEC_PORT_CLASS_EXP_TOT_AMT,MM_1_DAY_YIELD_PCT,DER_MM_7_DAY_YIELD_PCT,DER_MM_30_DAY_YIELD_PCT,DER_MM_COMPOUND_7D_YIELD_PCT,DER_MM_1_DAY_N1A_YIELD_PCT,DER_MM_7_DAY_N1A_YIELD_PCT,DER_MM_N1A_30_DAY_YIELD_PCT,N1A_DIST_REIMBURSEMENT_AMT,DER_MM_RST_7_DAY_YIELD_PCT,DER_MM_RST_30_DAY_YIELD_PCT,DER_N1A_DIST_INCOME_AMT,DER_N1A_DAILY_MIL_RT,N1A_DIST_INCOME_UNMOD_AMT,N1A_DIST_INCOME_ADJ_AMT,N1A_DIST_INCOME_BREAKAGE_AMT,N1A_DIST_INCOME_ADJ_REV_AMT,DIST_1_DAY_YIELD_PCT,DIST_30_DAY_YIELD_PCT,NAV_AMT,DER_SEC_1_DAY_YIELD_PCT,DER_SEC_30_DAY_YIELD_PCT,DER_SEC_RESTATED_YIELD_PCT,DISTRIBUTABLE_CAPSTOCK_QTY,N1A_GROSS_INCOME_UNMOD_AMT,N1A_REIMBURSEMENT_EARNED_AMT,N1A_WAIVER_EARNED_AMT,FDR_N1A_TAX_AMT,FDR_N1A_GROSS_DIST_INCOME_AMT,ADJ_EXCL_SHARE_CLASS_CALC_IND,DER_N1A_DAILY_YIELD_PCT,DER_SEC_YIELD_PME_CHG_PCT,DER_MM_1D_DIST_YLD_DOD_CHG_PCT,DER_MM_7D_DIST_YLD_DOD_CHG_PCT,DER_MM_1D_N1A_YLD_DOD_CHG_PCT,DER_MM_7D_N1A_YLD_DOD_CHG_PCT,DER_DIST_12_MO_YIELD_PCT,DER_DIST_30_DAY_YIELD_PCT,DER_MM_RESTATE_1_DAY_YIELD_PCT,DER_MM_N1A_COMPOUND_7DAY_YIELD,SEC_REIMBURSEMENT_EARNED_AMT,DIST_UNMOD_30_DAY_YIELD_PCT,DIST_12_MO_MIL_RT,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.SHARE_CLASS_SID,entity.REPORTING_DT,entity.CALENDAR_DT,entity.MM_1_DAY_MIL_RT,entity.DER_MM_RESTATED_MIL_RT,entity.DIST_YIELD_MIL_RT,entity.FDR_SEC_EXPENSE_AMT,entity.FDR_SEC_PORT_CLASS_EXP_TOT_AMT,entity.MM_1_DAY_YIELD_PCT,entity.DER_MM_7_DAY_YIELD_PCT,entity.DER_MM_30_DAY_YIELD_PCT,entity.DER_MM_COMPOUND_7D_YIELD_PCT,entity.DER_MM_1_DAY_N1A_YIELD_PCT,entity.DER_MM_7_DAY_N1A_YIELD_PCT,entity.DER_MM_N1A_30_DAY_YIELD_PCT,entity.N1A_DIST_REIMBURSEMENT_AMT,entity.DER_MM_RST_7_DAY_YIELD_PCT,entity.DER_MM_RST_30_DAY_YIELD_PCT,entity.DER_N1A_DIST_INCOME_AMT,entity.DER_N1A_DAILY_MIL_RT,entity.N1A_DIST_INCOME_UNMOD_AMT,entity.N1A_DIST_INCOME_ADJ_AMT,entity.N1A_DIST_INCOME_BREAKAGE_AMT,entity.N1A_DIST_INCOME_ADJ_REV_AMT,entity.DIST_1_DAY_YIELD_PCT,entity.DIST_30_DAY_YIELD_PCT,entity.NAV_AMT,entity.DER_SEC_1_DAY_YIELD_PCT,entity.DER_SEC_30_DAY_YIELD_PCT,entity.DER_SEC_RESTATED_YIELD_PCT,entity.DISTRIBUTABLE_CAPSTOCK_QTY,entity.N1A_GROSS_INCOME_UNMOD_AMT,entity.N1A_REIMBURSEMENT_EARNED_AMT,entity.N1A_WAIVER_EARNED_AMT,entity.FDR_N1A_TAX_AMT,entity.FDR_N1A_GROSS_DIST_INCOME_AMT,entity.ADJ_EXCL_SHARE_CLASS_CALC_IND,entity.DER_N1A_DAILY_YIELD_PCT,entity.DER_SEC_YIELD_PME_CHG_PCT,entity.DER_MM_1D_DIST_YLD_DOD_CHG_PCT,entity.DER_MM_7D_DIST_YLD_DOD_CHG_PCT,entity.DER_MM_1D_N1A_YLD_DOD_CHG_PCT,entity.DER_MM_7D_N1A_YLD_DOD_CHG_PCT,entity.DER_DIST_12_MO_YIELD_PCT,entity.DER_DIST_30_DAY_YIELD_PCT,entity.DER_MM_RESTATE_1_DAY_YIELD_PCT,entity.DER_MM_N1A_COMPOUND_7DAY_YIELD,entity.SEC_REIMBURSEMENT_EARNED_AMT,entity.DIST_UNMOD_30_DAY_YIELD_PCT,entity.DIST_12_MO_MIL_RT,entity.CREATE_ID,CURRENT_DATE);
    ELSE
      /** Update **/
      UPDATE SHARE_CLASS_SNAPSHOT SET SHARE_CLASS_SID = entity.SHARE_CLASS_SID,REPORTING_DT = entity.REPORTING_DT,CALENDAR_DT = entity.CALENDAR_DT,MM_1_DAY_MIL_RT = entity.MM_1_DAY_MIL_RT,DER_MM_RESTATED_MIL_RT = entity.DER_MM_RESTATED_MIL_RT,DIST_YIELD_MIL_RT = entity.DIST_YIELD_MIL_RT,FDR_SEC_EXPENSE_AMT = entity.FDR_SEC_EXPENSE_AMT,FDR_SEC_PORT_CLASS_EXP_TOT_AMT = entity.FDR_SEC_PORT_CLASS_EXP_TOT_AMT,MM_1_DAY_YIELD_PCT = entity.MM_1_DAY_YIELD_PCT,DER_MM_7_DAY_YIELD_PCT = entity.DER_MM_7_DAY_YIELD_PCT,DER_MM_30_DAY_YIELD_PCT = entity.DER_MM_30_DAY_YIELD_PCT,DER_MM_COMPOUND_7D_YIELD_PCT = entity.DER_MM_COMPOUND_7D_YIELD_PCT,DER_MM_1_DAY_N1A_YIELD_PCT = entity.DER_MM_1_DAY_N1A_YIELD_PCT,DER_MM_7_DAY_N1A_YIELD_PCT = entity.DER_MM_7_DAY_N1A_YIELD_PCT,DER_MM_N1A_30_DAY_YIELD_PCT = entity.DER_MM_N1A_30_DAY_YIELD_PCT,N1A_DIST_REIMBURSEMENT_AMT = entity.N1A_DIST_REIMBURSEMENT_AMT,DER_MM_RST_7_DAY_YIELD_PCT = entity.DER_MM_RST_7_DAY_YIELD_PCT,DER_MM_RST_30_DAY_YIELD_PCT = entity.DER_MM_RST_30_DAY_YIELD_PCT,DER_N1A_DIST_INCOME_AMT = entity.DER_N1A_DIST_INCOME_AMT,DER_N1A_DAILY_MIL_RT = entity.DER_N1A_DAILY_MIL_RT,N1A_DIST_INCOME_UNMOD_AMT = entity.N1A_DIST_INCOME_UNMOD_AMT,N1A_DIST_INCOME_ADJ_AMT = entity.N1A_DIST_INCOME_ADJ_AMT,N1A_DIST_INCOME_BREAKAGE_AMT = entity.N1A_DIST_INCOME_BREAKAGE_AMT,N1A_DIST_INCOME_ADJ_REV_AMT = entity.N1A_DIST_INCOME_ADJ_REV_AMT,DIST_1_DAY_YIELD_PCT = entity.DIST_1_DAY_YIELD_PCT,DIST_30_DAY_YIELD_PCT = entity.DIST_30_DAY_YIELD_PCT,NAV_AMT = entity.NAV_AMT,DER_SEC_1_DAY_YIELD_PCT = entity.DER_SEC_1_DAY_YIELD_PCT,DER_SEC_30_DAY_YIELD_PCT = entity.DER_SEC_30_DAY_YIELD_PCT,DER_SEC_RESTATED_YIELD_PCT = entity.DER_SEC_RESTATED_YIELD_PCT,DISTRIBUTABLE_CAPSTOCK_QTY = entity.DISTRIBUTABLE_CAPSTOCK_QTY,N1A_GROSS_INCOME_UNMOD_AMT = entity.N1A_GROSS_INCOME_UNMOD_AMT,N1A_REIMBURSEMENT_EARNED_AMT = entity.N1A_REIMBURSEMENT_EARNED_AMT,N1A_WAIVER_EARNED_AMT = entity.N1A_WAIVER_EARNED_AMT,FDR_N1A_TAX_AMT = entity.FDR_N1A_TAX_AMT,FDR_N1A_GROSS_DIST_INCOME_AMT = entity.FDR_N1A_GROSS_DIST_INCOME_AMT,ADJ_EXCL_SHARE_CLASS_CALC_IND = entity.ADJ_EXCL_SHARE_CLASS_CALC_IND,DER_N1A_DAILY_YIELD_PCT = entity.DER_N1A_DAILY_YIELD_PCT,DER_SEC_YIELD_PME_CHG_PCT = entity.DER_SEC_YIELD_PME_CHG_PCT,DER_MM_1D_DIST_YLD_DOD_CHG_PCT = entity.DER_MM_1D_DIST_YLD_DOD_CHG_PCT,DER_MM_7D_DIST_YLD_DOD_CHG_PCT = entity.DER_MM_7D_DIST_YLD_DOD_CHG_PCT,DER_MM_1D_N1A_YLD_DOD_CHG_PCT = entity.DER_MM_1D_N1A_YLD_DOD_CHG_PCT,DER_MM_7D_N1A_YLD_DOD_CHG_PCT = entity.DER_MM_7D_N1A_YLD_DOD_CHG_PCT,DER_DIST_12_MO_YIELD_PCT = entity.DER_DIST_12_MO_YIELD_PCT,DER_DIST_30_DAY_YIELD_PCT = entity.DER_DIST_30_DAY_YIELD_PCT,DER_MM_RESTATE_1_DAY_YIELD_PCT = entity.DER_MM_RESTATE_1_DAY_YIELD_PCT,DER_MM_N1A_COMPOUND_7DAY_YIELD = entity.DER_MM_N1A_COMPOUND_7DAY_YIELD,SEC_REIMBURSEMENT_EARNED_AMT = entity.SEC_REIMBURSEMENT_EARNED_AMT,DIST_UNMOD_30_DAY_YIELD_PCT = entity.DIST_UNMOD_30_DAY_YIELD_PCT,DIST_12_MO_MIL_RT = entity.DIST_12_MO_MIL_RT,UPDATE_ID = entity.CREATE_ID,UPDATE_TS = CURRENT_DATE
      WHERE SHARE_CLASS_SNAPSHOT_SID = vSid;
    END IF;

    oSid := vSid;
END SAVE_SHARE_CLASS_SNAPSHOT;
/
--------------------------------------------------------
--  DDL for Procedure SAVE_TRADABLE_ENTITY_SNAPSHOT
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE SAVE_TRADABLE_ENTITY_SNAPSHOT 
(
    entity IN TRADABLE_ENTITY_SNAPSHOT_T,
    updateCalcResult IN SMALLINT,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
BEGIN
    SELECT MIN(TRADABLE_ENTITY_SNAPSHOT_SID) INTO vSid FROM TRADABLE_ENTITY_SNAPSHOT
    WHERE REPORTING_DT = entity.REPORTING_DT 
      AND TRADABLE_ENTITY_SID = entity.TRADABLE_ENTITY_SID;

    IF vSid IS NULL THEN
      /** Not exist, insert **/
      vSid := TRADABLE_ENTITY_SNAPSHOT_SEQ.NEXTVAL;
      INSERT INTO TRADABLE_ENTITY_SNAPSHOT (TRADABLE_ENTITY_SNAPSHOT_SID,TRADABLE_ENTITY_SID,REPORTING_DT,DER_YIELD_CALC_ENGINE_CD,DER_INCOME_CALC_ENGINE_CD,DER_REDEMPTION_PRC,DER_REDEMPTION_DT,MARKET_PRC,CURRENT_INCOME_RT,FDR_TIPS_INFLATIONARY_RATIO_RT,FDR_CLEAN_PRC,DER_SEC_1_DAY_YIELD_RT,LAST_ADJ_USER_ID,LAST_ADJ_TS,LAST_ADJ_APPROVAL_STATUS_CD,LAST_ADJ_APPROVER_USER_ID,LAST_ADJ_APPROVAL_TS,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.TRADABLE_ENTITY_SID,entity.REPORTING_DT,entity.DER_YIELD_CALC_ENGINE_CD,entity.DER_INCOME_CALC_ENGINE_CD,entity.DER_REDEMPTION_PRC,entity.DER_REDEMPTION_DT,entity.MARKET_PRC,entity.CURRENT_INCOME_RT,entity.FDR_TIPS_INFLATIONARY_RATIO_RT,entity.FDR_CLEAN_PRC,entity.DER_SEC_1_DAY_YIELD_RT,entity.LAST_ADJ_USER_ID,entity.LAST_ADJ_TS,entity.LAST_ADJ_APPROVAL_STATUS_CD,entity.LAST_ADJ_APPROVER_USER_ID,entity.LAST_ADJ_APPROVAL_TS,entity.CREATE_ID,CURRENT_DATE);
    ELSE
      /** Update **/
      IF updateCalcResult = 1 THEN
        UPDATE TRADABLE_ENTITY_SNAPSHOT SET TRADABLE_ENTITY_SID = entity.TRADABLE_ENTITY_SID,REPORTING_DT = entity.REPORTING_DT,DER_YIELD_CALC_ENGINE_CD = entity.DER_YIELD_CALC_ENGINE_CD,DER_INCOME_CALC_ENGINE_CD = entity.DER_INCOME_CALC_ENGINE_CD,DER_REDEMPTION_PRC = entity.DER_REDEMPTION_PRC,DER_REDEMPTION_DT = entity.DER_REDEMPTION_DT,MARKET_PRC = entity.MARKET_PRC,CURRENT_INCOME_RT = entity.CURRENT_INCOME_RT,FDR_TIPS_INFLATIONARY_RATIO_RT = entity.FDR_TIPS_INFLATIONARY_RATIO_RT,FDR_CLEAN_PRC = entity.FDR_CLEAN_PRC,DER_SEC_1_DAY_YIELD_RT = entity.DER_SEC_1_DAY_YIELD_RT,LAST_ADJ_USER_ID = entity.LAST_ADJ_USER_ID,LAST_ADJ_TS = entity.LAST_ADJ_TS,LAST_ADJ_APPROVAL_STATUS_CD = entity.LAST_ADJ_APPROVAL_STATUS_CD,LAST_ADJ_APPROVER_USER_ID = entity.LAST_ADJ_APPROVER_USER_ID,LAST_ADJ_APPROVAL_TS = entity.LAST_ADJ_APPROVAL_TS,UPDATE_ID = entity.CREATE_ID,UPDATE_TS = CURRENT_DATE
        WHERE TRADABLE_ENTITY_SNAPSHOT_SID = vSid;
      ELSE
        /** Do not update calculation result columns **/
        UPDATE TRADABLE_ENTITY_SNAPSHOT SET TRADABLE_ENTITY_SID = entity.TRADABLE_ENTITY_SID,REPORTING_DT = entity.REPORTING_DT,DER_REDEMPTION_DT = entity.DER_REDEMPTION_DT,MARKET_PRC = entity.MARKET_PRC,CURRENT_INCOME_RT = entity.CURRENT_INCOME_RT,FDR_TIPS_INFLATIONARY_RATIO_RT = entity.FDR_TIPS_INFLATIONARY_RATIO_RT,LAST_ADJ_USER_ID = entity.LAST_ADJ_USER_ID,LAST_ADJ_TS = entity.LAST_ADJ_TS,LAST_ADJ_APPROVAL_STATUS_CD = entity.LAST_ADJ_APPROVAL_STATUS_CD,LAST_ADJ_APPROVER_USER_ID = entity.LAST_ADJ_APPROVER_USER_ID,LAST_ADJ_APPROVAL_TS = entity.LAST_ADJ_APPROVAL_TS,UPDATE_ID = entity.CREATE_ID,UPDATE_TS = CURRENT_DATE
        WHERE TRADABLE_ENTITY_SNAPSHOT_SID = vSid;
      END IF;
    END IF;

    oSid := vSid;
END SAVE_TRADABLE_ENTITY_SNAPSHOT;
/

  CREATE OR REPLACE PROCEDURE SAVE_INSTRUMENT
(
    entity IN INSTRUMENT_T,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
    vHash VARCHAR2(500);
BEGIN
    SELECT MIN(INSTRUMENT_SID), MIN(HASH_KEY_TXT) INTO vSid, vHash FROM 
      (SELECT INSTRUMENT_SID, HASH_KEY_TXT FROM INSTRUMENT
        WHERE INSTRUMENT_ID = entity.INSTRUMENT_ID AND EFFECTIVE_DT <= CURRENT_DATE AND EXPIRATION_DT > CURRENT_DATE
        ORDER BY EXPIRATION_DT DESC, INSTRUMENT_SID DESC)
    WHERE ROWNUM = 1;

    IF vHash IS NULL OR vHash != entity.HASH_KEY_TXT THEN
      /** Not exist or hash not match **/
      IF vSid IS NOT NULL THEN
        /** Mark expired **/
        UPDATE INSTRUMENT SET EXPIRATION_DT = CURRENT_DATE, UPDATE_ID = entity.CREATE_ID, UPDATE_TS = CURRENT_DATE
        WHERE INSTRUMENT_SID = vSid;
      END IF;

      /** Insert new row **/
      vSid := INSTRUMENT_SEQ.NEXTVAL;
      INSERT INTO INSTRUMENT (INSTRUMENT_SID,INSTRUMENT_ID,INSTRUMENT_SHORT_NM,INSTRUMENT_TYPE_CD,COUPON_RATE_TYPE_CD,CUSIP,PRE_REFUNDED_DT,DIVIDEND_PAYMENT_FREQUENCY_NBR,FDR_EQUITY_IND,ORIGINAL_ISSUE_PRC,FDR_STEP_BOND_IND,DER_INSTRUMENT_CLASS_NM,PROSPECTIVE_YIELD_METHOD_CD,FINAL_MATURITY_DT,HYBRID_CALCULATION_CD,ORIGINAL_ISSUE_DT,MATURITY_PRC,DEFAULT_IND,DER_FOF_SECURITY_CD,EFFECTIVE_DT,HASH_KEY_TXT,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.INSTRUMENT_ID,entity.INSTRUMENT_SHORT_NM,entity.INSTRUMENT_TYPE_CD,entity.COUPON_RATE_TYPE_CD,entity.CUSIP,entity.PRE_REFUNDED_DT,entity.DIVIDEND_PAYMENT_FREQUENCY_NBR,entity.FDR_EQUITY_IND,entity.ORIGINAL_ISSUE_PRC,entity.FDR_STEP_BOND_IND,entity.DER_INSTRUMENT_CLASS_NM,entity.PROSPECTIVE_YIELD_METHOD_CD,entity.FINAL_MATURITY_DT,entity.HYBRID_CALCULATION_CD,entity.ORIGINAL_ISSUE_DT,entity.MATURITY_PRC,entity.DEFAULT_IND,entity.DER_FOF_SECURITY_CD,CURRENT_DATE,entity.HASH_KEY_TXT,entity.CREATE_ID,CURRENT_DATE);
    END IF;

    oSid := vSid;

END SAVE_INSTRUMENT;
/


  CREATE OR REPLACE PROCEDURE SAVE_PORTFOLIO
(
    entity IN PORTFOLIO_T,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
    vHash VARCHAR2(500);
BEGIN
    SELECT MIN(PORTFOLIO_SID), MIN(HASH_KEY_TXT) INTO vSid, vHash FROM 
      (SELECT PORTFOLIO_SID, HASH_KEY_TXT FROM PORTFOLIO
        WHERE PORTFOLIO_ID = entity.PORTFOLIO_ID AND EFFECTIVE_DT <= CURRENT_DATE AND EXPIRATION_DT > CURRENT_DATE
        ORDER BY EXPIRATION_DT DESC, PORTFOLIO_SID DESC)
    WHERE ROWNUM = 1;

    IF vHash IS NULL OR vHash != entity.HASH_KEY_TXT THEN
      /** Not exist or hash not match **/
      IF vSid IS NOT NULL THEN
        /** Mark expired **/
        UPDATE PORTFOLIO SET EXPIRATION_DT = CURRENT_DATE, UPDATE_ID = entity.CREATE_ID, UPDATE_TS = CURRENT_DATE
        WHERE PORTFOLIO_SID = vSid;
      END IF;

      /** Insert new row **/
      vSid := PORTFOLIO_SEQ.NEXTVAL;
      INSERT INTO PORTFOLIO (PORTFOLIO_SID,PORTFOLIO_ID,PORTFOLIO_SHORT_NM,PORTFOLIO_NM,FDR_DISTRIBUTION_ELIGIBLE_IND,FDR_PORTFOLIO_TYPE_CD,CUSIP,EFFECTIVE_DT,HASH_KEY_TXT,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.PORTFOLIO_ID,entity.PORTFOLIO_SHORT_NM,entity.PORTFOLIO_NM,entity.FDR_DISTRIBUTION_ELIGIBLE_IND,entity.FDR_PORTFOLIO_TYPE_CD,entity.CUSIP,CURRENT_DATE,entity.HASH_KEY_TXT,entity.CREATE_ID,CURRENT_DATE);
    END IF;

    oSid := vSid;

END SAVE_PORTFOLIO;
/


  CREATE OR REPLACE PROCEDURE SAVE_TRADABLE_ENTITY
(
    entity IN TRADABLE_ENTITY_T,
    oSid OUT INTEGER
)
AS
    vSid INTEGER;
    vHash VARCHAR2(500);
BEGIN
    SELECT MIN(TRADABLE_ENTITY_SID), MIN(HASH_KEY_TXT) INTO vSid, vHash FROM 
      (SELECT TRADABLE_ENTITY_SID, HASH_KEY_TXT FROM TRADABLE_ENTITY
        WHERE INSTRUMENT_SID = entity.INSTRUMENT_SID AND TRADABLE_ENTITY_ID = entity.TRADABLE_ENTITY_ID AND EFFECTIVE_DT <= CURRENT_DATE AND EXPIRATION_DT > CURRENT_DATE
        ORDER BY EXPIRATION_DT DESC, TRADABLE_ENTITY_SID DESC)
    WHERE ROWNUM = 1;

    IF vHash IS NULL OR vHash != entity.HASH_KEY_TXT THEN
      /** Not exist or hash not match **/
      IF vSid IS NOT NULL THEN
        /** Mark expired **/
        UPDATE TRADABLE_ENTITY SET EXPIRATION_DT = CURRENT_DATE, UPDATE_ID = entity.CREATE_ID, UPDATE_TS = CURRENT_DATE
        WHERE TRADABLE_ENTITY_SID = vSid;
      END IF;

      /** Insert new row **/
      vSid := TRADABLE_ENTITY_SEQ.NEXTVAL;
      INSERT INTO TRADABLE_ENTITY (TRADABLE_ENTITY_SID,INSTRUMENT_SID,TRADABLE_ENTITY_ID,MARKET_EXCHANGE_CD,TRADABLE_ENTITY_INTERNAL_ID,EFFECTIVE_DT,HASH_KEY_TXT,CREATE_ID,CREATE_TS)
      VALUES (vSid,entity.INSTRUMENT_SID,entity.TRADABLE_ENTITY_ID,entity.MARKET_EXCHANGE_CD,entity.TRADABLE_ENTITY_INTERNAL_ID,CURRENT_DATE,entity.HASH_KEY_TXT,entity.CREATE_ID,CURRENT_DATE);
    END IF;

    oSid := vSid;

END SAVE_TRADABLE_ENTITY;
/


create or replace PROCEDURE AVG_MM1(p_sid IN NUMBER, start_date IN  DATE, end_date IN  DATE, s OUT  NUMBER) AS
BEGIN
  SELECT AVG (DER_MM_7_DAY_YIELD_PCT) into s FROM SHARE_CLASS_SNAPSHOT WHERE SHARE_CLASS_SID = p_sid AND REPORTING_DT between start_date and end_date;
END;
/
create or replace PROCEDURE SUM_D1(p_sid IN NUMBER, start_date IN  DATE, end_date IN  DATE, s OUT  NUMBER) AS
BEGIN
  SELECT SUM (DER_MM_1_DAY_N1A_YIELD_PCT) into s FROM SHARE_CLASS_SNAPSHOT WHERE SHARE_CLASS_SID = p_sid AND REPORTING_DT between start_date and end_date;
END;
/
create or replace PROCEDURE SUM_DR1(p_sid IN NUMBER, start_date IN  DATE, end_date IN  DATE, s OUT  NUMBER) AS
BEGIN
  SELECT SUM (DER_MM_RESTATE_1_DAY_YIELD_PCT) into s FROM SHARE_CLASS_SNAPSHOT WHERE SHARE_CLASS_SID = p_sid AND REPORTING_DT between start_date and end_date;
END;
/
create or replace PROCEDURE AVG_MM7(p_sid IN NUMBER, start_date IN  DATE, end_date IN  DATE, s OUT  NUMBER) AS
BEGIN
  SELECT AVG (DER_MM_7_DAY_YIELD_PCT) into s FROM SHARE_CLASS_SNAPSHOT WHERE SHARE_CLASS_SID = p_sid AND REPORTING_DT between start_date and end_date;
END;
/
create or replace PROCEDURE SUM_D7(p_sid IN NUMBER, start_date IN  DATE, end_date IN  DATE, s OUT  NUMBER) AS
BEGIN
  SELECT SUM (DER_MM_7_DAY_N1A_YIELD_PCT) into s FROM SHARE_CLASS_SNAPSHOT WHERE SHARE_CLASS_SID = p_sid AND REPORTING_DT between start_date and end_date;
END;
/

-- Query portfolio and instrument
create or replace PROCEDURE QUERY_DY_PORTFOLIO(business_date IN  DATE, rs out sys_refcursor) AS
BEGIN
open rs for  SELECT * FROM PORTFOLIO p LEFT JOIN PORTFOLIO_SNAPSHOT ps ON p.PORTFOLIO_SID = ps.PORTFOLIO_SID  LEFT JOIN SHARE_CLASS sc ON p.PORTFOLIO_SID = sc.PORTFOLIO_SID  LEFT JOIN SHARE_CLASS_SNAPSHOT scs ON scs.SHARE_CLASS_SID = sc.SHARE_CLASS_SID  WHERE ps.REPORTING_DT = business_date AND p.FDR_DISTRIBUTION_ELIGIBLE_IND = 'Y';
END;
/
create or replace PROCEDURE QUERY_DY_INSTRUMENT(business_date IN  DATE, rs out sys_refcursor) AS
BEGIN
open rs for SELECT * FROM INSTRUMENT i LEFT JOIN  PUT_SCHEDULE ps ON i.INSTRUMENT_SID = ps.INSTRUMENT_SID LEFT JOIN  INTEREST_RATE_SCHEDULE irs ON i.INSTRUMENT_SID = irs.INSTRUMENT_SID LEFT JOIN  TRADABLE_ENTITY te ON i.INSTRUMENT_SID = te.INSTRUMENT_SID WHERE ps.PUT_DT = business_date;
END;
/
create or replace PROCEDURE QUERY_MM_PORTFOLIO(business_date IN  DATE, rs out sys_refcursor) AS
BEGIN
open rs for  SELECT * FROM PORTFOLIO p LEFT JOIN PORTFOLIO_SNAPSHOT ps ON p.PORTFOLIO_SID = ps.PORTFOLIO_SID  LEFT JOIN SHARE_CLASS sc ON p.PORTFOLIO_SID = sc.PORTFOLIO_SID  LEFT JOIN SHARE_CLASS_SNAPSHOT scs ON scs.SHARE_CLASS_SID = sc.SHARE_CLASS_SID  WHERE ps.REPORTING_DT = business_date AND (p.FDR_DISTRIBUTION_ELIGIBLE_IND = 'N' or p.FDR_DISTRIBUTION_ELIGIBLE_IND = null) AND p.FDR_PORTFOLIO_TYPE_CD = 'MMKT_YIELD';
END;
/
create or replace PROCEDURE QUERY_MM_INSTRUMENT(business_date IN  DATE, rs out sys_refcursor) AS
BEGIN
open rs for SELECT * FROM INSTRUMENT i LEFT JOIN  PUT_SCHEDULE ps ON i.INSTRUMENT_SID = ps.INSTRUMENT_SID LEFT JOIN  INTEREST_RATE_SCHEDULE irs ON i.INSTRUMENT_SID = irs.INSTRUMENT_SID LEFT JOIN  TRADABLE_ENTITY te ON i.INSTRUMENT_SID = te.INSTRUMENT_SID WHERE ps.PUT_DT = business_date;
END;
/